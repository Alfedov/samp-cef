/* automatically generated by rust-bindgen */

#![allow(non_snake_case, non_camel_case_types)]
pub use winapi::shared::minwindef::{DWORD, HINSTANCE, LPARAM, UINT, WPARAM};
pub use winapi::shared::windef::{HCURSOR, HICON, HMENU, HWND, POINT};
pub use winapi::um::winuser::MSG;

pub type wchar_t = ::std::os::raw::c_ushort;
pub type int64 = ::std::os::raw::c_longlong;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub type int32 = ::std::os::raw::c_int;
pub type uint32 = ::std::os::raw::c_uint;
pub type char16 = wchar_t;
#[repr(C)]
pub struct _cef_string_wide_t {
    pub str: *mut wchar_t,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut wchar_t)>,
}
pub type cef_string_wide_t = _cef_string_wide_t;
#[repr(C)]
pub struct _cef_string_utf8_t {
    pub str: *mut ::std::os::raw::c_char,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut ::std::os::raw::c_char)>,
}
pub type cef_string_utf8_t = _cef_string_utf8_t;
#[repr(C)]
pub struct _cef_string_utf16_t {
    pub str: *mut char16,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut char16)>,
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
pub type cef_string_userfree_wide_t = *mut cef_string_wide_t;
pub type cef_string_userfree_utf8_t = *mut cef_string_utf8_t;
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;

pub type cef_char_t = char16;
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
pub type cef_string_list_t = *mut ::std::os::raw::c_void;
pub type cef_string_map_t = *mut ::std::os::raw::c_void;
pub type cef_string_multimap_t = *mut ::std::os::raw::c_void;

pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
pub struct _cef_time_t {
    pub year: ::std::os::raw::c_int,
    pub month: ::std::os::raw::c_int,
    pub day_of_week: ::std::os::raw::c_int,
    pub day_of_month: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub minute: ::std::os::raw::c_int,
    pub second: ::std::os::raw::c_int,
    pub millisecond: ::std::os::raw::c_int,
}
pub type cef_time_t = _cef_time_t;

#[repr(C)]
pub struct _cef_main_args_t {
    pub instance: HINSTANCE,
}
pub type cef_main_args_t = _cef_main_args_t;
#[repr(C)]
pub struct _cef_window_info_t {
    pub ex_style: DWORD,
    pub window_name: cef_string_t,
    pub style: DWORD,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub parent_window: HWND,
    pub menu: HMENU,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub shared_texture_enabled: ::std::os::raw::c_int,
    pub external_begin_frame_enabled: ::std::os::raw::c_int,
    pub window: HWND,
}
pub type cef_window_info_t = _cef_window_info_t;
pub type cef_color_t = uint32;
pub mod cef_log_severity_t {
    pub type Type = i32;
    pub const LOGSEVERITY_DEFAULT: Type = 0;
    pub const LOGSEVERITY_VERBOSE: Type = 1;
    pub const LOGSEVERITY_DEBUG: Type = 1;
    pub const LOGSEVERITY_INFO: Type = 2;
    pub const LOGSEVERITY_WARNING: Type = 3;
    pub const LOGSEVERITY_ERROR: Type = 4;
    pub const LOGSEVERITY_FATAL: Type = 5;
    pub const LOGSEVERITY_DISABLE: Type = 99;
}
pub mod cef_state_t {
    pub type Type = i32;
    pub const STATE_DEFAULT: Type = 0;
    pub const STATE_ENABLED: Type = 1;
    pub const STATE_DISABLED: Type = 2;
}
#[repr(C)]
pub struct _cef_settings_t {
    pub size: usize,
    pub no_sandbox: ::std::os::raw::c_int,
    pub browser_subprocess_path: cef_string_t,
    pub framework_dir_path: cef_string_t,
    pub main_bundle_path: cef_string_t,
    pub multi_threaded_message_loop: ::std::os::raw::c_int,
    pub external_message_pump: ::std::os::raw::c_int,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub command_line_args_disabled: ::std::os::raw::c_int,
    pub cache_path: cef_string_t,
    pub root_cache_path: cef_string_t,
    pub user_data_path: cef_string_t,
    pub persist_session_cookies: ::std::os::raw::c_int,
    pub persist_user_preferences: ::std::os::raw::c_int,
    pub user_agent: cef_string_t,
    pub product_version: cef_string_t,
    pub locale: cef_string_t,
    pub log_file: cef_string_t,
    pub log_severity: cef_log_severity_t::Type,
    pub javascript_flags: cef_string_t,
    pub resources_dir_path: cef_string_t,
    pub locales_dir_path: cef_string_t,
    pub pack_loading_disabled: ::std::os::raw::c_int,
    pub remote_debugging_port: ::std::os::raw::c_int,
    pub uncaught_exception_stack_size: ::std::os::raw::c_int,
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    pub enable_net_security_expiration: ::std::os::raw::c_int,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
    pub application_client_id_for_file_scanning: cef_string_t,
}
pub type cef_settings_t = _cef_settings_t;
#[repr(C)]
pub struct _cef_request_context_settings_t {
    pub size: usize,
    pub cache_path: cef_string_t,
    pub persist_session_cookies: ::std::os::raw::c_int,
    pub persist_user_preferences: ::std::os::raw::c_int,
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    pub enable_net_security_expiration: ::std::os::raw::c_int,
    pub accept_language_list: cef_string_t,
}
pub type cef_request_context_settings_t = _cef_request_context_settings_t;
#[repr(C)]
pub struct _cef_browser_settings_t {
    pub size: usize,
    pub windowless_frame_rate: ::std::os::raw::c_int,
    pub standard_font_family: cef_string_t,
    pub fixed_font_family: cef_string_t,
    pub serif_font_family: cef_string_t,
    pub sans_serif_font_family: cef_string_t,
    pub cursive_font_family: cef_string_t,
    pub fantasy_font_family: cef_string_t,
    pub default_font_size: ::std::os::raw::c_int,
    pub default_fixed_font_size: ::std::os::raw::c_int,
    pub minimum_font_size: ::std::os::raw::c_int,
    pub minimum_logical_font_size: ::std::os::raw::c_int,
    pub default_encoding: cef_string_t,
    pub remote_fonts: cef_state_t::Type,
    pub javascript: cef_state_t::Type,
    pub javascript_close_windows: cef_state_t::Type,
    pub javascript_access_clipboard: cef_state_t::Type,
    pub javascript_dom_paste: cef_state_t::Type,
    pub plugins: cef_state_t::Type,
    pub universal_access_from_file_urls: cef_state_t::Type,
    pub file_access_from_file_urls: cef_state_t::Type,
    pub web_security: cef_state_t::Type,
    pub image_loading: cef_state_t::Type,
    pub image_shrink_standalone_to_fit: cef_state_t::Type,
    pub text_area_resize: cef_state_t::Type,
    pub tab_to_links: cef_state_t::Type,
    pub local_storage: cef_state_t::Type,
    pub databases: cef_state_t::Type,
    pub application_cache: cef_state_t::Type,
    pub webgl: cef_state_t::Type,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
}
pub type cef_browser_settings_t = _cef_browser_settings_t;
pub mod cef_return_value_t {
    pub type Type = i32;
    pub const RV_CANCEL: Type = 0;
    pub const RV_CONTINUE: Type = 1;
    pub const RV_CONTINUE_ASYNC: Type = 2;
}
#[repr(C)]
pub struct _cef_urlparts_t {
    pub spec: cef_string_t,
    pub scheme: cef_string_t,
    pub username: cef_string_t,
    pub password: cef_string_t,
    pub host: cef_string_t,
    pub port: cef_string_t,
    pub origin: cef_string_t,
    pub path: cef_string_t,
    pub query: cef_string_t,
}
pub type cef_urlparts_t = _cef_urlparts_t;
#[repr(C)]
pub struct _cef_cookie_t {
    pub name: cef_string_t,
    pub value: cef_string_t,
    pub domain: cef_string_t,
    pub path: cef_string_t,
    pub secure: ::std::os::raw::c_int,
    pub httponly: ::std::os::raw::c_int,
    pub creation: cef_time_t,
    pub last_access: cef_time_t,
    pub has_expires: ::std::os::raw::c_int,
    pub expires: cef_time_t,
}
pub type cef_cookie_t = _cef_cookie_t;
pub mod cef_termination_status_t {
    pub type Type = i32;
    pub const TS_ABNORMAL_TERMINATION: Type = 0;
    pub const TS_PROCESS_WAS_KILLED: Type = 1;
    pub const TS_PROCESS_CRASHED: Type = 2;
    pub const TS_PROCESS_OOM: Type = 3;
}
pub mod cef_path_key_t {
    pub type Type = i32;
    pub const PK_DIR_CURRENT: Type = 0;
    pub const PK_DIR_EXE: Type = 1;
    pub const PK_DIR_MODULE: Type = 2;
    pub const PK_DIR_TEMP: Type = 3;
    pub const PK_FILE_EXE: Type = 4;
    pub const PK_FILE_MODULE: Type = 5;
    pub const PK_LOCAL_APP_DATA: Type = 6;
    pub const PK_USER_DATA: Type = 7;
    pub const PK_DIR_RESOURCES: Type = 8;
}
pub mod cef_storage_type_t {
    pub type Type = i32;
    pub const ST_LOCALSTORAGE: Type = 0;
    pub const ST_SESSIONSTORAGE: Type = 1;
}
pub mod cef_errorcode_t {
    pub type Type = i32;
    pub const ERR_NONE: Type = 0;
    pub const ERR_IO_PENDING: Type = -1;
    pub const ERR_FAILED: Type = -2;
    pub const ERR_ABORTED: Type = -3;
    pub const ERR_INVALID_ARGUMENT: Type = -4;
    pub const ERR_INVALID_HANDLE: Type = -5;
    pub const ERR_FILE_NOT_FOUND: Type = -6;
    pub const ERR_TIMED_OUT: Type = -7;
    pub const ERR_FILE_TOO_BIG: Type = -8;
    pub const ERR_UNEXPECTED: Type = -9;
    pub const ERR_ACCESS_DENIED: Type = -10;
    pub const ERR_NOT_IMPLEMENTED: Type = -11;
    pub const ERR_INSUFFICIENT_RESOURCES: Type = -12;
    pub const ERR_OUT_OF_MEMORY: Type = -13;
    pub const ERR_UPLOAD_FILE_CHANGED: Type = -14;
    pub const ERR_SOCKET_NOT_CONNECTED: Type = -15;
    pub const ERR_FILE_EXISTS: Type = -16;
    pub const ERR_FILE_PATH_TOO_LONG: Type = -17;
    pub const ERR_FILE_NO_SPACE: Type = -18;
    pub const ERR_FILE_VIRUS_INFECTED: Type = -19;
    pub const ERR_BLOCKED_BY_CLIENT: Type = -20;
    pub const ERR_NETWORK_CHANGED: Type = -21;
    pub const ERR_BLOCKED_BY_ADMINISTRATOR: Type = -22;
    pub const ERR_SOCKET_IS_CONNECTED: Type = -23;
    pub const ERR_BLOCKED_ENROLLMENT_CHECK_PENDING: Type = -24;
    pub const ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED: Type = -25;
    pub const ERR_CONTEXT_SHUT_DOWN: Type = -26;
    pub const ERR_BLOCKED_BY_RESPONSE: Type = -27;
    pub const ERR_BLOCKED_BY_XSS_AUDITOR: Type = -28;
    pub const ERR_CLEARTEXT_NOT_PERMITTED: Type = -29;
    pub const ERR_CONNECTION_CLOSED: Type = -100;
    pub const ERR_CONNECTION_RESET: Type = -101;
    pub const ERR_CONNECTION_REFUSED: Type = -102;
    pub const ERR_CONNECTION_ABORTED: Type = -103;
    pub const ERR_CONNECTION_FAILED: Type = -104;
    pub const ERR_NAME_NOT_RESOLVED: Type = -105;
    pub const ERR_INTERNET_DISCONNECTED: Type = -106;
    pub const ERR_SSL_PROTOCOL_ERROR: Type = -107;
    pub const ERR_ADDRESS_INVALID: Type = -108;
    pub const ERR_ADDRESS_UNREACHABLE: Type = -109;
    pub const ERR_SSL_CLIENT_AUTH_CERT_NEEDED: Type = -110;
    pub const ERR_TUNNEL_CONNECTION_FAILED: Type = -111;
    pub const ERR_NO_SSL_VERSIONS_ENABLED: Type = -112;
    pub const ERR_SSL_VERSION_OR_CIPHER_MISMATCH: Type = -113;
    pub const ERR_SSL_RENEGOTIATION_REQUESTED: Type = -114;
    pub const ERR_PROXY_AUTH_UNSUPPORTED: Type = -115;
    pub const ERR_CERT_ERROR_IN_SSL_RENEGOTIATION: Type = -116;
    pub const ERR_BAD_SSL_CLIENT_AUTH_CERT: Type = -117;
    pub const ERR_CONNECTION_TIMED_OUT: Type = -118;
    pub const ERR_HOST_RESOLVER_QUEUE_TOO_LARGE: Type = -119;
    pub const ERR_SOCKS_CONNECTION_FAILED: Type = -120;
    pub const ERR_SOCKS_CONNECTION_HOST_UNREACHABLE: Type = -121;
    pub const ERR_ALPN_NEGOTIATION_FAILED: Type = -122;
    pub const ERR_SSL_NO_RENEGOTIATION: Type = -123;
    pub const ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES: Type = -124;
    pub const ERR_SSL_DECOMPRESSION_FAILURE_ALERT: Type = -125;
    pub const ERR_SSL_BAD_RECORD_MAC_ALERT: Type = -126;
    pub const ERR_PROXY_AUTH_REQUESTED: Type = -127;
    pub const ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY: Type = -129;
    pub const ERR_PROXY_CONNECTION_FAILED: Type = -130;
    pub const ERR_MANDATORY_PROXY_CONFIGURATION_FAILED: Type = -131;
    pub const ERR_PRECONNECT_MAX_SOCKET_LIMIT: Type = -133;
    pub const ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED: Type = -134;
    pub const ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY: Type = -135;
    pub const ERR_PROXY_CERTIFICATE_INVALID: Type = -136;
    pub const ERR_NAME_RESOLUTION_FAILED: Type = -137;
    pub const ERR_NETWORK_ACCESS_DENIED: Type = -138;
    pub const ERR_TEMPORARILY_THROTTLED: Type = -139;
    pub const ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT: Type = -140;
    pub const ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED: Type = -141;
    pub const ERR_MSG_TOO_BIG: Type = -142;
    pub const ERR_WS_PROTOCOL_ERROR: Type = -145;
    pub const ERR_ADDRESS_IN_USE: Type = -147;
    pub const ERR_SSL_HANDSHAKE_NOT_COMPLETED: Type = -148;
    pub const ERR_SSL_BAD_PEER_PUBLIC_KEY: Type = -149;
    pub const ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN: Type = -150;
    pub const ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED: Type = -151;
    pub const ERR_ORIGIN_BOUND_CERT_GENERATION_TYPE_MISMATCH: Type = -152;
    pub const ERR_SSL_DECRYPT_ERROR_ALERT: Type = -153;
    pub const ERR_WS_THROTTLE_QUEUE_TOO_LARGE: Type = -154;
    pub const ERR_SSL_SERVER_CERT_CHANGED: Type = -156;
    pub const ERR_SSL_UNRECOGNIZED_NAME_ALERT: Type = -159;
    pub const ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR: Type = -160;
    pub const ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR: Type = -161;
    pub const ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE: Type = -162;
    pub const ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE: Type = -163;
    pub const ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT: Type = -164;
    pub const ERR_ICANN_NAME_COLLISION: Type = -166;
    pub const ERR_SSL_SERVER_CERT_BAD_FORMAT: Type = -167;
    pub const ERR_CT_STH_PARSING_FAILED: Type = -168;
    pub const ERR_CT_STH_INCOMPLETE: Type = -169;
    pub const ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH: Type = -170;
    pub const ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED: Type = -171;
    pub const ERR_SSL_OBSOLETE_CIPHER: Type = -172;
    pub const ERR_WS_UPGRADE: Type = -173;
    pub const ERR_READ_IF_READY_NOT_IMPLEMENTED: Type = -174;
    pub const ERR_NO_BUFFER_SPACE: Type = -176;
    pub const ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS: Type = -177;
    pub const ERR_EARLY_DATA_REJECTED: Type = -178;
    pub const ERR_WRONG_VERSION_ON_EARLY_DATA: Type = -179;
    pub const ERR_TLS13_DOWNGRADE_DETECTED: Type = -180;
    pub const ERR_SSL_KEY_USAGE_INCOMPATIBLE: Type = -181;
    pub const ERR_CERT_COMMON_NAME_INVALID: Type = -200;
    pub const ERR_CERT_DATE_INVALID: Type = -201;
    pub const ERR_CERT_AUTHORITY_INVALID: Type = -202;
    pub const ERR_CERT_CONTAINS_ERRORS: Type = -203;
    pub const ERR_CERT_NO_REVOCATION_MECHANISM: Type = -204;
    pub const ERR_CERT_UNABLE_TO_CHECK_REVOCATION: Type = -205;
    pub const ERR_CERT_REVOKED: Type = -206;
    pub const ERR_CERT_INVALID: Type = -207;
    pub const ERR_CERT_WEAK_SIGNATURE_ALGORITHM: Type = -208;
    pub const ERR_CERT_NON_UNIQUE_NAME: Type = -210;
    pub const ERR_CERT_WEAK_KEY: Type = -211;
    pub const ERR_CERT_NAME_CONSTRAINT_VIOLATION: Type = -212;
    pub const ERR_CERT_VALIDITY_TOO_LONG: Type = -213;
    pub const ERR_CERTIFICATE_TRANSPARENCY_REQUIRED: Type = -214;
    pub const ERR_CERT_SYMANTEC_LEGACY: Type = -215;
    pub const ERR_CERT_END: Type = -216;
    pub const ERR_INVALID_URL: Type = -300;
    pub const ERR_DISALLOWED_URL_SCHEME: Type = -301;
    pub const ERR_UNKNOWN_URL_SCHEME: Type = -302;
    pub const ERR_INVALID_REDIRECT: Type = -303;
    pub const ERR_TOO_MANY_REDIRECTS: Type = -310;
    pub const ERR_UNSAFE_REDIRECT: Type = -311;
    pub const ERR_UNSAFE_PORT: Type = -312;
    pub const ERR_INVALID_RESPONSE: Type = -320;
    pub const ERR_INVALID_CHUNKED_ENCODING: Type = -321;
    pub const ERR_METHOD_NOT_SUPPORTED: Type = -322;
    pub const ERR_UNEXPECTED_PROXY_AUTH: Type = -323;
    pub const ERR_EMPTY_RESPONSE: Type = -324;
    pub const ERR_RESPONSE_HEADERS_TOO_BIG: Type = -325;
    pub const ERR_PAC_STATUS_NOT_OK: Type = -326;
    pub const ERR_PAC_SCRIPT_FAILED: Type = -327;
    pub const ERR_REQUEST_RANGE_NOT_SATISFIABLE: Type = -328;
    pub const ERR_MALFORMED_IDENTITY: Type = -329;
    pub const ERR_CONTENT_DECODING_FAILED: Type = -330;
    pub const ERR_NETWORK_IO_SUSPENDED: Type = -331;
    pub const ERR_SYN_REPLY_NOT_RECEIVED: Type = -332;
    pub const ERR_ENCODING_CONVERSION_FAILED: Type = -333;
    pub const ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT: Type = -334;
    pub const ERR_NO_SUPPORTED_PROXIES: Type = -336;
    pub const ERR_SPDY_PROTOCOL_ERROR: Type = -337;
    pub const ERR_INVALID_AUTH_CREDENTIALS: Type = -338;
    pub const ERR_UNSUPPORTED_AUTH_SCHEME: Type = -339;
    pub const ERR_ENCODING_DETECTION_FAILED: Type = -340;
    pub const ERR_MISSING_AUTH_CREDENTIALS: Type = -341;
    pub const ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS: Type = -342;
    pub const ERR_MISCONFIGURED_AUTH_ENVIRONMENT: Type = -343;
    pub const ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS: Type = -344;
    pub const ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN: Type = -345;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH: Type = -346;
    pub const ERR_INCOMPLETE_SPDY_HEADERS: Type = -347;
    pub const ERR_PAC_NOT_IN_DHCP: Type = -348;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION: Type = -349;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION: Type = -350;
    pub const ERR_SPDY_SERVER_REFUSED_STREAM: Type = -351;
    pub const ERR_SPDY_PING_FAILED: Type = -352;
    pub const ERR_CONTENT_LENGTH_MISMATCH: Type = -354;
    pub const ERR_INCOMPLETE_CHUNKED_ENCODING: Type = -355;
    pub const ERR_QUIC_PROTOCOL_ERROR: Type = -356;
    pub const ERR_RESPONSE_HEADERS_TRUNCATED: Type = -357;
    pub const ERR_QUIC_HANDSHAKE_FAILED: Type = -358;
    pub const ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY: Type = -360;
    pub const ERR_SPDY_FLOW_CONTROL_ERROR: Type = -361;
    pub const ERR_SPDY_FRAME_SIZE_ERROR: Type = -362;
    pub const ERR_SPDY_COMPRESSION_ERROR: Type = -363;
    pub const ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION: Type = -364;
    pub const ERR_HTTP_1_1_REQUIRED: Type = -365;
    pub const ERR_PROXY_HTTP_1_1_REQUIRED: Type = -366;
    pub const ERR_PAC_SCRIPT_TERMINATED: Type = -367;
    pub const ERR_INVALID_HTTP_RESPONSE: Type = -370;
    pub const ERR_CONTENT_DECODING_INIT_FAILED: Type = -371;
    pub const ERR_SPDY_RST_STREAM_NO_ERROR_RECEIVED: Type = -372;
    pub const ERR_SPDY_PUSHED_STREAM_NOT_AVAILABLE: Type = -373;
    pub const ERR_SPDY_CLAIMED_PUSHED_STREAM_RESET_BY_SERVER: Type = -374;
    pub const ERR_TOO_MANY_RETRIES: Type = -375;
    pub const ERR_SPDY_STREAM_CLOSED: Type = -376;
    pub const ERR_SPDY_CLIENT_REFUSED_STREAM: Type = -377;
    pub const ERR_SPDY_PUSHED_RESPONSE_DOES_NOT_MATCH: Type = -378;
    pub const ERR_CACHE_MISS: Type = -400;
    pub const ERR_CACHE_READ_FAILURE: Type = -401;
    pub const ERR_CACHE_WRITE_FAILURE: Type = -402;
    pub const ERR_CACHE_OPERATION_NOT_SUPPORTED: Type = -403;
    pub const ERR_CACHE_OPEN_FAILURE: Type = -404;
    pub const ERR_CACHE_CREATE_FAILURE: Type = -405;
    pub const ERR_CACHE_RACE: Type = -406;
    pub const ERR_CACHE_CHECKSUM_READ_FAILURE: Type = -407;
    pub const ERR_CACHE_CHECKSUM_MISMATCH: Type = -408;
    pub const ERR_CACHE_LOCK_TIMEOUT: Type = -409;
    pub const ERR_CACHE_AUTH_FAILURE_AFTER_READ: Type = -410;
    pub const ERR_CACHE_ENTRY_NOT_SUITABLE: Type = -411;
    pub const ERR_CACHE_DOOM_FAILURE: Type = -412;
    pub const ERR_CACHE_OPEN_OR_CREATE_FAILURE: Type = -413;
    pub const ERR_INSECURE_RESPONSE: Type = -501;
    pub const ERR_NO_PRIVATE_KEY_FOR_CERT: Type = -502;
    pub const ERR_ADD_USER_CERT_FAILED: Type = -503;
    pub const ERR_INVALID_SIGNED_EXCHANGE: Type = -504;
    pub const ERR_FTP_FAILED: Type = -601;
    pub const ERR_FTP_SERVICE_UNAVAILABLE: Type = -602;
    pub const ERR_FTP_TRANSFER_ABORTED: Type = -603;
    pub const ERR_FTP_FILE_BUSY: Type = -604;
    pub const ERR_FTP_SYNTAX_ERROR: Type = -605;
    pub const ERR_FTP_COMMAND_NOT_SUPPORTED: Type = -606;
    pub const ERR_FTP_BAD_COMMAND_SEQUENCE: Type = -607;
    pub const ERR_PKCS12_IMPORT_BAD_PASSWORD: Type = -701;
    pub const ERR_PKCS12_IMPORT_FAILED: Type = -702;
    pub const ERR_IMPORT_CA_CERT_NOT_CA: Type = -703;
    pub const ERR_IMPORT_CERT_ALREADY_EXISTS: Type = -704;
    pub const ERR_IMPORT_CA_CERT_FAILED: Type = -705;
    pub const ERR_IMPORT_SERVER_CERT_FAILED: Type = -706;
    pub const ERR_PKCS12_IMPORT_INVALID_MAC: Type = -707;
    pub const ERR_PKCS12_IMPORT_INVALID_FILE: Type = -708;
    pub const ERR_PKCS12_IMPORT_UNSUPPORTED: Type = -709;
    pub const ERR_KEY_GENERATION_FAILED: Type = -710;
    pub const ERR_PRIVATE_KEY_EXPORT_FAILED: Type = -712;
    pub const ERR_SELF_SIGNED_CERT_GENERATION_FAILED: Type = -713;
    pub const ERR_CERT_DATABASE_CHANGED: Type = -714;
    pub const ERR_DNS_MALFORMED_RESPONSE: Type = -800;
    pub const ERR_DNS_SERVER_REQUIRES_TCP: Type = -801;
    pub const ERR_DNS_SERVER_FAILED: Type = -802;
    pub const ERR_DNS_TIMED_OUT: Type = -803;
    pub const ERR_DNS_CACHE_MISS: Type = -804;
    pub const ERR_DNS_SEARCH_EMPTY: Type = -805;
    pub const ERR_DNS_SORT_ERROR: Type = -806;
    pub const ERR_DNS_HTTP_FAILED: Type = -807;
}
pub mod cef_cert_status_t {
    pub type Type = i32;
    pub const CERT_STATUS_NONE: Type = 0;
    pub const CERT_STATUS_COMMON_NAME_INVALID: Type = 1;
    pub const CERT_STATUS_DATE_INVALID: Type = 2;
    pub const CERT_STATUS_AUTHORITY_INVALID: Type = 4;
    pub const CERT_STATUS_NO_REVOCATION_MECHANISM: Type = 16;
    pub const CERT_STATUS_UNABLE_TO_CHECK_REVOCATION: Type = 32;
    pub const CERT_STATUS_REVOKED: Type = 64;
    pub const CERT_STATUS_INVALID: Type = 128;
    pub const CERT_STATUS_WEAK_SIGNATURE_ALGORITHM: Type = 256;
    pub const CERT_STATUS_NON_UNIQUE_NAME: Type = 1024;
    pub const CERT_STATUS_WEAK_KEY: Type = 2048;
    pub const CERT_STATUS_PINNED_KEY_MISSING: Type = 8192;
    pub const CERT_STATUS_NAME_CONSTRAINT_VIOLATION: Type = 16384;
    pub const CERT_STATUS_VALIDITY_TOO_LONG: Type = 32768;
    pub const CERT_STATUS_IS_EV: Type = 65536;
    pub const CERT_STATUS_REV_CHECKING_ENABLED: Type = 131072;
    pub const CERT_STATUS_SHA1_SIGNATURE_PRESENT: Type = 524288;
    pub const CERT_STATUS_CT_COMPLIANCE_FAILED: Type = 1048576;
}
pub mod cef_window_open_disposition_t {
    pub type Type = i32;
    pub const WOD_UNKNOWN: Type = 0;
    pub const WOD_CURRENT_TAB: Type = 1;
    pub const WOD_SINGLETON_TAB: Type = 2;
    pub const WOD_NEW_FOREGROUND_TAB: Type = 3;
    pub const WOD_NEW_BACKGROUND_TAB: Type = 4;
    pub const WOD_NEW_POPUP: Type = 5;
    pub const WOD_NEW_WINDOW: Type = 6;
    pub const WOD_SAVE_TO_DISK: Type = 7;
    pub const WOD_OFF_THE_RECORD: Type = 8;
    pub const WOD_IGNORE_ACTION: Type = 9;
}
pub mod cef_drag_operations_mask_t {
    pub type Type = i32;
    pub const DRAG_OPERATION_NONE: Type = 0;
    pub const DRAG_OPERATION_COPY: Type = 1;
    pub const DRAG_OPERATION_LINK: Type = 2;
    pub const DRAG_OPERATION_GENERIC: Type = 4;
    pub const DRAG_OPERATION_PRIVATE: Type = 8;
    pub const DRAG_OPERATION_MOVE: Type = 16;
    pub const DRAG_OPERATION_DELETE: Type = 32;
    pub const DRAG_OPERATION_EVERY: Type = -1;
}
pub mod cef_text_input_mode_t {
    pub type Type = i32;
    pub const CEF_TEXT_INPUT_MODE_DEFAULT: Type = 0;
    pub const CEF_TEXT_INPUT_MODE_NONE: Type = 1;
    pub const CEF_TEXT_INPUT_MODE_TEXT: Type = 2;
    pub const CEF_TEXT_INPUT_MODE_TEL: Type = 3;
    pub const CEF_TEXT_INPUT_MODE_URL: Type = 4;
    pub const CEF_TEXT_INPUT_MODE_EMAIL: Type = 5;
    pub const CEF_TEXT_INPUT_MODE_NUMERIC: Type = 6;
    pub const CEF_TEXT_INPUT_MODE_DECIMAL: Type = 7;
    pub const CEF_TEXT_INPUT_MODE_SEARCH: Type = 8;
    pub const CEF_TEXT_INPUT_MODE_MAX: Type = 8;
}
pub mod cef_v8_accesscontrol_t {
    pub type Type = i32;
    pub const V8_ACCESS_CONTROL_DEFAULT: Type = 0;
    pub const V8_ACCESS_CONTROL_ALL_CAN_READ: Type = 1;
    pub const V8_ACCESS_CONTROL_ALL_CAN_WRITE: Type = 2;
    pub const V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING: Type = 4;
}
pub mod cef_v8_propertyattribute_t {
    pub type Type = i32;
    pub const V8_PROPERTY_ATTRIBUTE_NONE: Type = 0;
    pub const V8_PROPERTY_ATTRIBUTE_READONLY: Type = 1;
    pub const V8_PROPERTY_ATTRIBUTE_DONTENUM: Type = 2;
    pub const V8_PROPERTY_ATTRIBUTE_DONTDELETE: Type = 4;
}
pub mod cef_postdataelement_type_t {
    pub type Type = i32;
    pub const PDE_TYPE_EMPTY: Type = 0;
    pub const PDE_TYPE_BYTES: Type = 1;
    pub const PDE_TYPE_FILE: Type = 2;
}
pub mod cef_resource_type_t {
    pub type Type = i32;
    pub const RT_MAIN_FRAME: Type = 0;
    pub const RT_SUB_FRAME: Type = 1;
    pub const RT_STYLESHEET: Type = 2;
    pub const RT_SCRIPT: Type = 3;
    pub const RT_IMAGE: Type = 4;
    pub const RT_FONT_RESOURCE: Type = 5;
    pub const RT_SUB_RESOURCE: Type = 6;
    pub const RT_OBJECT: Type = 7;
    pub const RT_MEDIA: Type = 8;
    pub const RT_WORKER: Type = 9;
    pub const RT_SHARED_WORKER: Type = 10;
    pub const RT_PREFETCH: Type = 11;
    pub const RT_FAVICON: Type = 12;
    pub const RT_XHR: Type = 13;
    pub const RT_PING: Type = 14;
    pub const RT_SERVICE_WORKER: Type = 15;
    pub const RT_CSP_REPORT: Type = 16;
    pub const RT_PLUGIN_RESOURCE: Type = 17;
}
pub mod cef_transition_type_t {
    pub type Type = i32;
    pub const TT_LINK: Type = 0;
    pub const TT_EXPLICIT: Type = 1;
    pub const TT_AUTO_SUBFRAME: Type = 3;
    pub const TT_MANUAL_SUBFRAME: Type = 4;
    pub const TT_FORM_SUBMIT: Type = 7;
    pub const TT_RELOAD: Type = 8;
    pub const TT_SOURCE_MASK: Type = 255;
    pub const TT_BLOCKED_FLAG: Type = 8388608;
    pub const TT_FORWARD_BACK_FLAG: Type = 16777216;
    pub const TT_CHAIN_START_FLAG: Type = 268435456;
    pub const TT_CHAIN_END_FLAG: Type = 536870912;
    pub const TT_CLIENT_REDIRECT_FLAG: Type = 1073741824;
    pub const TT_SERVER_REDIRECT_FLAG: Type = -2147483648;
    pub const TT_IS_REDIRECT_MASK: Type = -1073741824;
    pub const TT_QUALIFIER_MASK: Type = -256;
}
pub mod cef_urlrequest_flags_t {
    pub type Type = i32;
    pub const UR_FLAG_NONE: Type = 0;
    pub const UR_FLAG_SKIP_CACHE: Type = 1;
    pub const UR_FLAG_ONLY_FROM_CACHE: Type = 2;
    pub const UR_FLAG_DISABLE_CACHE: Type = 4;
    pub const UR_FLAG_ALLOW_STORED_CREDENTIALS: Type = 8;
    pub const UR_FLAG_REPORT_UPLOAD_PROGRESS: Type = 16;
    pub const UR_FLAG_NO_DOWNLOAD_DATA: Type = 32;
    pub const UR_FLAG_NO_RETRY_ON_5XX: Type = 64;
    pub const UR_FLAG_STOP_ON_REDIRECT: Type = 128;
}
pub mod cef_urlrequest_status_t {
    pub type Type = i32;
    pub const UR_UNKNOWN: Type = 0;
    pub const UR_SUCCESS: Type = 1;
    pub const UR_IO_PENDING: Type = 2;
    pub const UR_CANCELED: Type = 3;
    pub const UR_FAILED: Type = 4;
}
#[repr(C)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
pub type cef_point_t = _cef_point_t;
#[derive(Clone)]
#[repr(C)]
pub struct _cef_rect_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
pub type cef_rect_t = _cef_rect_t;
#[repr(C)]
pub struct _cef_size_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
pub type cef_size_t = _cef_size_t;
#[repr(C)]
pub struct _cef_range_t {
    pub from: ::std::os::raw::c_int,
    pub to: ::std::os::raw::c_int,
}
pub type cef_range_t = _cef_range_t;
#[repr(C)]
pub struct _cef_insets_t {
    pub top: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
}
pub type cef_insets_t = _cef_insets_t;
#[repr(C)]
pub struct _cef_draggable_region_t {
    pub bounds: cef_rect_t,
    pub draggable: ::std::os::raw::c_int,
}
pub type cef_draggable_region_t = _cef_draggable_region_t;
pub mod cef_process_id_t {
    pub type Type = i32;
    pub const PID_BROWSER: Type = 0;
    pub const PID_RENDERER: Type = 1;
}
pub mod cef_thread_id_t {
    pub type Type = i32;
    pub const TID_UI: Type = 0;
    pub const TID_FILE_BACKGROUND: Type = 1;
    pub const TID_FILE: Type = 1;
    pub const TID_FILE_USER_VISIBLE: Type = 2;
    pub const TID_FILE_USER_BLOCKING: Type = 3;
    pub const TID_PROCESS_LAUNCHER: Type = 4;
    pub const TID_IO: Type = 5;
    pub const TID_RENDERER: Type = 6;
}
pub mod cef_thread_priority_t {
    pub type Type = i32;
    pub const TP_BACKGROUND: Type = 0;
    pub const TP_NORMAL: Type = 1;
    pub const TP_DISPLAY: Type = 2;
    pub const TP_REALTIME_AUDIO: Type = 3;
}
pub mod cef_message_loop_type_t {
    pub type Type = i32;
    pub const ML_TYPE_DEFAULT: Type = 0;
    pub const ML_TYPE_UI: Type = 1;
    pub const ML_TYPE_IO: Type = 2;
}
pub mod cef_com_init_mode_t {
    pub type Type = i32;
    pub const COM_INIT_MODE_NONE: Type = 0;
    pub const COM_INIT_MODE_STA: Type = 1;
    pub const COM_INIT_MODE_MTA: Type = 2;
}
pub mod cef_value_type_t {
    pub type Type = i32;
    pub const VTYPE_INVALID: Type = 0;
    pub const VTYPE_NULL: Type = 1;
    pub const VTYPE_BOOL: Type = 2;
    pub const VTYPE_INT: Type = 3;
    pub const VTYPE_DOUBLE: Type = 4;
    pub const VTYPE_STRING: Type = 5;
    pub const VTYPE_BINARY: Type = 6;
    pub const VTYPE_DICTIONARY: Type = 7;
    pub const VTYPE_LIST: Type = 8;
}
pub mod cef_jsdialog_type_t {
    pub type Type = i32;
    pub const JSDIALOGTYPE_ALERT: Type = 0;
    pub const JSDIALOGTYPE_CONFIRM: Type = 1;
    pub const JSDIALOGTYPE_PROMPT: Type = 2;
}
#[repr(C)]
pub struct _cef_screen_info_t {
    pub device_scale_factor: f32,
    pub depth: ::std::os::raw::c_int,
    pub depth_per_component: ::std::os::raw::c_int,
    pub is_monochrome: ::std::os::raw::c_int,
    pub rect: cef_rect_t,
    pub available_rect: cef_rect_t,
}
pub type cef_screen_info_t = _cef_screen_info_t;
pub mod cef_menu_id_t {
    pub type Type = i32;
    pub const MENU_ID_BACK: Type = 100;
    pub const MENU_ID_FORWARD: Type = 101;
    pub const MENU_ID_RELOAD: Type = 102;
    pub const MENU_ID_RELOAD_NOCACHE: Type = 103;
    pub const MENU_ID_STOPLOAD: Type = 104;
    pub const MENU_ID_UNDO: Type = 110;
    pub const MENU_ID_REDO: Type = 111;
    pub const MENU_ID_CUT: Type = 112;
    pub const MENU_ID_COPY: Type = 113;
    pub const MENU_ID_PASTE: Type = 114;
    pub const MENU_ID_DELETE: Type = 115;
    pub const MENU_ID_SELECT_ALL: Type = 116;
    pub const MENU_ID_FIND: Type = 130;
    pub const MENU_ID_PRINT: Type = 131;
    pub const MENU_ID_VIEW_SOURCE: Type = 132;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_0: Type = 200;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_1: Type = 201;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_2: Type = 202;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_3: Type = 203;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_4: Type = 204;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_LAST: Type = 204;
    pub const MENU_ID_NO_SPELLING_SUGGESTIONS: Type = 205;
    pub const MENU_ID_ADD_TO_DICTIONARY: Type = 206;
    pub const MENU_ID_CUSTOM_FIRST: Type = 220;
    pub const MENU_ID_CUSTOM_LAST: Type = 250;
    pub const MENU_ID_USER_FIRST: Type = 26500;
    pub const MENU_ID_USER_LAST: Type = 28500;
}
pub mod cef_mouse_button_type_t {
    pub type Type = i32;
    pub const MBT_LEFT: Type = 0;
    pub const MBT_MIDDLE: Type = 1;
    pub const MBT_RIGHT: Type = 2;
}
#[repr(C)]
pub struct _cef_mouse_event_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub modifiers: uint32,
}
pub type cef_mouse_event_t = _cef_mouse_event_t;
pub mod cef_touch_event_type_t {
    pub type Type = i32;
    pub const CEF_TET_RELEASED: Type = 0;
    pub const CEF_TET_PRESSED: Type = 1;
    pub const CEF_TET_MOVED: Type = 2;
    pub const CEF_TET_CANCELLED: Type = 3;
}
pub mod cef_pointer_type_t {
    pub type Type = i32;
    pub const CEF_POINTER_TYPE_TOUCH: Type = 0;
    pub const CEF_POINTER_TYPE_MOUSE: Type = 1;
    pub const CEF_POINTER_TYPE_PEN: Type = 2;
    pub const CEF_POINTER_TYPE_ERASER: Type = 3;
    pub const CEF_POINTER_TYPE_UNKNOWN: Type = 4;
}
#[repr(C)]
pub struct _cef_touch_event_t {
    pub id: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub radius_x: f32,
    pub radius_y: f32,
    pub rotation_angle: f32,
    pub pressure: f32,
    pub type_: cef_touch_event_type_t::Type,
    pub modifiers: uint32,
    pub pointer_type: cef_pointer_type_t::Type,
}
pub type cef_touch_event_t = _cef_touch_event_t;
pub mod cef_paint_element_type_t {
    pub type Type = i32;
    pub const PET_VIEW: Type = 0;
    pub const PET_POPUP: Type = 1;
}
pub mod cef_event_flags_t {
    pub type Type = i32;
    pub const EVENTFLAG_NONE: Type = 0;
    pub const EVENTFLAG_CAPS_LOCK_ON: Type = 1;
    pub const EVENTFLAG_SHIFT_DOWN: Type = 2;
    pub const EVENTFLAG_CONTROL_DOWN: Type = 4;
    pub const EVENTFLAG_ALT_DOWN: Type = 8;
    pub const EVENTFLAG_LEFT_MOUSE_BUTTON: Type = 16;
    pub const EVENTFLAG_MIDDLE_MOUSE_BUTTON: Type = 32;
    pub const EVENTFLAG_RIGHT_MOUSE_BUTTON: Type = 64;
    pub const EVENTFLAG_COMMAND_DOWN: Type = 128;
    pub const EVENTFLAG_NUM_LOCK_ON: Type = 256;
    pub const EVENTFLAG_IS_KEY_PAD: Type = 512;
    pub const EVENTFLAG_IS_LEFT: Type = 1024;
    pub const EVENTFLAG_IS_RIGHT: Type = 2048;
}
pub mod cef_menu_item_type_t {
    pub type Type = i32;
    pub const MENUITEMTYPE_NONE: Type = 0;
    pub const MENUITEMTYPE_COMMAND: Type = 1;
    pub const MENUITEMTYPE_CHECK: Type = 2;
    pub const MENUITEMTYPE_RADIO: Type = 3;
    pub const MENUITEMTYPE_SEPARATOR: Type = 4;
    pub const MENUITEMTYPE_SUBMENU: Type = 5;
}
pub mod cef_context_menu_type_flags_t {
    pub type Type = i32;
    pub const CM_TYPEFLAG_NONE: Type = 0;
    pub const CM_TYPEFLAG_PAGE: Type = 1;
    pub const CM_TYPEFLAG_FRAME: Type = 2;
    pub const CM_TYPEFLAG_LINK: Type = 4;
    pub const CM_TYPEFLAG_MEDIA: Type = 8;
    pub const CM_TYPEFLAG_SELECTION: Type = 16;
    pub const CM_TYPEFLAG_EDITABLE: Type = 32;
}
pub mod cef_context_menu_media_type_t {
    pub type Type = i32;
    pub const CM_MEDIATYPE_NONE: Type = 0;
    pub const CM_MEDIATYPE_IMAGE: Type = 1;
    pub const CM_MEDIATYPE_VIDEO: Type = 2;
    pub const CM_MEDIATYPE_AUDIO: Type = 3;
    pub const CM_MEDIATYPE_FILE: Type = 4;
    pub const CM_MEDIATYPE_PLUGIN: Type = 5;
}
pub mod cef_context_menu_media_state_flags_t {
    pub type Type = i32;
    pub const CM_MEDIAFLAG_NONE: Type = 0;
    pub const CM_MEDIAFLAG_ERROR: Type = 1;
    pub const CM_MEDIAFLAG_PAUSED: Type = 2;
    pub const CM_MEDIAFLAG_MUTED: Type = 4;
    pub const CM_MEDIAFLAG_LOOP: Type = 8;
    pub const CM_MEDIAFLAG_CAN_SAVE: Type = 16;
    pub const CM_MEDIAFLAG_HAS_AUDIO: Type = 32;
    pub const CM_MEDIAFLAG_HAS_VIDEO: Type = 64;
    pub const CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT: Type = 128;
    pub const CM_MEDIAFLAG_CAN_PRINT: Type = 256;
    pub const CM_MEDIAFLAG_CAN_ROTATE: Type = 512;
}
pub mod cef_context_menu_edit_state_flags_t {
    pub type Type = i32;
    pub const CM_EDITFLAG_NONE: Type = 0;
    pub const CM_EDITFLAG_CAN_UNDO: Type = 1;
    pub const CM_EDITFLAG_CAN_REDO: Type = 2;
    pub const CM_EDITFLAG_CAN_CUT: Type = 4;
    pub const CM_EDITFLAG_CAN_COPY: Type = 8;
    pub const CM_EDITFLAG_CAN_PASTE: Type = 16;
    pub const CM_EDITFLAG_CAN_DELETE: Type = 32;
    pub const CM_EDITFLAG_CAN_SELECT_ALL: Type = 64;
    pub const CM_EDITFLAG_CAN_TRANSLATE: Type = 128;
}
pub mod cef_key_event_type_t {
    pub type Type = i32;
    pub const KEYEVENT_RAWKEYDOWN: Type = 0;
    pub const KEYEVENT_KEYDOWN: Type = 1;
    pub const KEYEVENT_KEYUP: Type = 2;
    pub const KEYEVENT_CHAR: Type = 3;
}
#[derive(Clone)]
#[repr(C)]
pub struct _cef_key_event_t {
    pub type_: cef_key_event_type_t::Type,
    pub modifiers: uint32,
    pub windows_key_code: ::std::os::raw::c_int,
    pub native_key_code: ::std::os::raw::c_int,
    pub is_system_key: ::std::os::raw::c_int,
    pub character: char16,
    pub unmodified_character: char16,
    pub focus_on_editable_field: ::std::os::raw::c_int,
}
pub type cef_key_event_t = _cef_key_event_t;
pub mod cef_focus_source_t {
    pub type Type = i32;
    pub const FOCUS_SOURCE_NAVIGATION: Type = 0;
    pub const FOCUS_SOURCE_SYSTEM: Type = 1;
}
pub mod cef_navigation_type_t {
    pub type Type = i32;
    pub const NAVIGATION_LINK_CLICKED: Type = 0;
    pub const NAVIGATION_FORM_SUBMITTED: Type = 1;
    pub const NAVIGATION_BACK_FORWARD: Type = 2;
    pub const NAVIGATION_RELOAD: Type = 3;
    pub const NAVIGATION_FORM_RESUBMITTED: Type = 4;
    pub const NAVIGATION_OTHER: Type = 5;
}
pub mod cef_xml_encoding_type_t {
    pub type Type = i32;
    pub const XML_ENCODING_NONE: Type = 0;
    pub const XML_ENCODING_UTF8: Type = 1;
    pub const XML_ENCODING_UTF16LE: Type = 2;
    pub const XML_ENCODING_UTF16BE: Type = 3;
    pub const XML_ENCODING_ASCII: Type = 4;
}
pub mod cef_xml_node_type_t {
    pub type Type = i32;
    pub const XML_NODE_UNSUPPORTED: Type = 0;
    pub const XML_NODE_PROCESSING_INSTRUCTION: Type = 1;
    pub const XML_NODE_DOCUMENT_TYPE: Type = 2;
    pub const XML_NODE_ELEMENT_START: Type = 3;
    pub const XML_NODE_ELEMENT_END: Type = 4;
    pub const XML_NODE_ATTRIBUTE: Type = 5;
    pub const XML_NODE_TEXT: Type = 6;
    pub const XML_NODE_CDATA: Type = 7;
    pub const XML_NODE_ENTITY_REFERENCE: Type = 8;
    pub const XML_NODE_WHITESPACE: Type = 9;
    pub const XML_NODE_COMMENT: Type = 10;
}
#[repr(C)]
pub struct _cef_popup_features_t {
    pub x: ::std::os::raw::c_int,
    pub xSet: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub ySet: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub widthSet: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub heightSet: ::std::os::raw::c_int,
    pub menuBarVisible: ::std::os::raw::c_int,
    pub statusBarVisible: ::std::os::raw::c_int,
    pub toolBarVisible: ::std::os::raw::c_int,
    pub scrollbarsVisible: ::std::os::raw::c_int,
}
pub type cef_popup_features_t = _cef_popup_features_t;
pub mod cef_dom_document_type_t {
    pub type Type = i32;
    pub const DOM_DOCUMENT_TYPE_UNKNOWN: Type = 0;
    pub const DOM_DOCUMENT_TYPE_HTML: Type = 1;
    pub const DOM_DOCUMENT_TYPE_XHTML: Type = 2;
    pub const DOM_DOCUMENT_TYPE_PLUGIN: Type = 3;
}
pub mod cef_dom_event_category_t {
    pub type Type = i32;
    pub const DOM_EVENT_CATEGORY_UNKNOWN: Type = 0;
    pub const DOM_EVENT_CATEGORY_UI: Type = 1;
    pub const DOM_EVENT_CATEGORY_MOUSE: Type = 2;
    pub const DOM_EVENT_CATEGORY_MUTATION: Type = 4;
    pub const DOM_EVENT_CATEGORY_KEYBOARD: Type = 8;
    pub const DOM_EVENT_CATEGORY_TEXT: Type = 16;
    pub const DOM_EVENT_CATEGORY_COMPOSITION: Type = 32;
    pub const DOM_EVENT_CATEGORY_DRAG: Type = 64;
    pub const DOM_EVENT_CATEGORY_CLIPBOARD: Type = 128;
    pub const DOM_EVENT_CATEGORY_MESSAGE: Type = 256;
    pub const DOM_EVENT_CATEGORY_WHEEL: Type = 512;
    pub const DOM_EVENT_CATEGORY_BEFORE_TEXT_INSERTED: Type = 1024;
    pub const DOM_EVENT_CATEGORY_OVERFLOW: Type = 2048;
    pub const DOM_EVENT_CATEGORY_PAGE_TRANSITION: Type = 4096;
    pub const DOM_EVENT_CATEGORY_POPSTATE: Type = 8192;
    pub const DOM_EVENT_CATEGORY_PROGRESS: Type = 16384;
    pub const DOM_EVENT_CATEGORY_XMLHTTPREQUEST_PROGRESS: Type = 32768;
}
pub mod cef_dom_event_phase_t {
    pub type Type = i32;
    pub const DOM_EVENT_PHASE_UNKNOWN: Type = 0;
    pub const DOM_EVENT_PHASE_CAPTURING: Type = 1;
    pub const DOM_EVENT_PHASE_AT_TARGET: Type = 2;
    pub const DOM_EVENT_PHASE_BUBBLING: Type = 3;
}
pub mod cef_dom_node_type_t {
    pub type Type = i32;
    pub const DOM_NODE_TYPE_UNSUPPORTED: Type = 0;
    pub const DOM_NODE_TYPE_ELEMENT: Type = 1;
    pub const DOM_NODE_TYPE_ATTRIBUTE: Type = 2;
    pub const DOM_NODE_TYPE_TEXT: Type = 3;
    pub const DOM_NODE_TYPE_CDATA_SECTION: Type = 4;
    pub const DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS: Type = 5;
    pub const DOM_NODE_TYPE_COMMENT: Type = 6;
    pub const DOM_NODE_TYPE_DOCUMENT: Type = 7;
    pub const DOM_NODE_TYPE_DOCUMENT_TYPE: Type = 8;
    pub const DOM_NODE_TYPE_DOCUMENT_FRAGMENT: Type = 9;
}
pub mod cef_file_dialog_mode_t {
    pub type Type = i32;
    pub const FILE_DIALOG_OPEN: Type = 0;
    pub const FILE_DIALOG_OPEN_MULTIPLE: Type = 1;
    pub const FILE_DIALOG_OPEN_FOLDER: Type = 2;
    pub const FILE_DIALOG_SAVE: Type = 3;
    pub const FILE_DIALOG_TYPE_MASK: Type = 255;
    pub const FILE_DIALOG_OVERWRITEPROMPT_FLAG: Type = 16777216;
    pub const FILE_DIALOG_HIDEREADONLY_FLAG: Type = 33554432;
}
pub mod cef_color_model_t {
    pub type Type = i32;
    pub const COLOR_MODEL_UNKNOWN: Type = 0;
    pub const COLOR_MODEL_GRAY: Type = 1;
    pub const COLOR_MODEL_COLOR: Type = 2;
    pub const COLOR_MODEL_CMYK: Type = 3;
    pub const COLOR_MODEL_CMY: Type = 4;
    pub const COLOR_MODEL_KCMY: Type = 5;
    pub const COLOR_MODEL_CMY_K: Type = 6;
    pub const COLOR_MODEL_BLACK: Type = 7;
    pub const COLOR_MODEL_GRAYSCALE: Type = 8;
    pub const COLOR_MODEL_RGB: Type = 9;
    pub const COLOR_MODEL_RGB16: Type = 10;
    pub const COLOR_MODEL_RGBA: Type = 11;
    pub const COLOR_MODEL_COLORMODE_COLOR: Type = 12;
    pub const COLOR_MODEL_COLORMODE_MONOCHROME: Type = 13;
    pub const COLOR_MODEL_HP_COLOR_COLOR: Type = 14;
    pub const COLOR_MODEL_HP_COLOR_BLACK: Type = 15;
    pub const COLOR_MODEL_PRINTOUTMODE_NORMAL: Type = 16;
    pub const COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY: Type = 17;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_CMYK: Type = 18;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE: Type = 19;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_RGB: Type = 20;
}
pub mod cef_duplex_mode_t {
    pub type Type = i32;
    pub const DUPLEX_MODE_UNKNOWN: Type = -1;
    pub const DUPLEX_MODE_SIMPLEX: Type = 0;
    pub const DUPLEX_MODE_LONG_EDGE: Type = 1;
    pub const DUPLEX_MODE_SHORT_EDGE: Type = 2;
}
pub mod cef_cursor_type_t {
    pub type Type = i32;
    pub const CT_POINTER: Type = 0;
    pub const CT_CROSS: Type = 1;
    pub const CT_HAND: Type = 2;
    pub const CT_IBEAM: Type = 3;
    pub const CT_WAIT: Type = 4;
    pub const CT_HELP: Type = 5;
    pub const CT_EASTRESIZE: Type = 6;
    pub const CT_NORTHRESIZE: Type = 7;
    pub const CT_NORTHEASTRESIZE: Type = 8;
    pub const CT_NORTHWESTRESIZE: Type = 9;
    pub const CT_SOUTHRESIZE: Type = 10;
    pub const CT_SOUTHEASTRESIZE: Type = 11;
    pub const CT_SOUTHWESTRESIZE: Type = 12;
    pub const CT_WESTRESIZE: Type = 13;
    pub const CT_NORTHSOUTHRESIZE: Type = 14;
    pub const CT_EASTWESTRESIZE: Type = 15;
    pub const CT_NORTHEASTSOUTHWESTRESIZE: Type = 16;
    pub const CT_NORTHWESTSOUTHEASTRESIZE: Type = 17;
    pub const CT_COLUMNRESIZE: Type = 18;
    pub const CT_ROWRESIZE: Type = 19;
    pub const CT_MIDDLEPANNING: Type = 20;
    pub const CT_EASTPANNING: Type = 21;
    pub const CT_NORTHPANNING: Type = 22;
    pub const CT_NORTHEASTPANNING: Type = 23;
    pub const CT_NORTHWESTPANNING: Type = 24;
    pub const CT_SOUTHPANNING: Type = 25;
    pub const CT_SOUTHEASTPANNING: Type = 26;
    pub const CT_SOUTHWESTPANNING: Type = 27;
    pub const CT_WESTPANNING: Type = 28;
    pub const CT_MOVE: Type = 29;
    pub const CT_VERTICALTEXT: Type = 30;
    pub const CT_CELL: Type = 31;
    pub const CT_CONTEXTMENU: Type = 32;
    pub const CT_ALIAS: Type = 33;
    pub const CT_PROGRESS: Type = 34;
    pub const CT_NODROP: Type = 35;
    pub const CT_COPY: Type = 36;
    pub const CT_NONE: Type = 37;
    pub const CT_NOTALLOWED: Type = 38;
    pub const CT_ZOOMIN: Type = 39;
    pub const CT_ZOOMOUT: Type = 40;
    pub const CT_GRAB: Type = 41;
    pub const CT_GRABBING: Type = 42;
    pub const CT_CUSTOM: Type = 43;
}
#[repr(C)]
pub struct _cef_cursor_info_t {
    pub hotspot: cef_point_t,
    pub image_scale_factor: f32,
    pub buffer: *mut ::std::os::raw::c_void,
    pub size: cef_size_t,
}
pub type cef_cursor_info_t = _cef_cursor_info_t;
pub mod cef_uri_unescape_rule_t {
    pub type Type = i32;
    pub const UU_NONE: Type = 0;
    pub const UU_NORMAL: Type = 1;
    pub const UU_SPACES: Type = 2;
    pub const UU_PATH_SEPARATORS: Type = 4;
    pub const UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS: Type = 8;
    pub const UU_SPOOFING_AND_CONTROL_CHARS: Type = 16;
    pub const UU_REPLACE_PLUS_WITH_SPACE: Type = 32;
}
pub mod cef_json_parser_options_t {
    pub type Type = i32;
    pub const JSON_PARSER_RFC: Type = 0;
    pub const JSON_PARSER_ALLOW_TRAILING_COMMAS: Type = 1;
}
pub mod cef_json_parser_error_t {
    pub type Type = i32;
    pub const JSON_NO_ERROR: Type = 0;
    pub const JSON_INVALID_ESCAPE: Type = 1;
    pub const JSON_SYNTAX_ERROR: Type = 2;
    pub const JSON_UNEXPECTED_TOKEN: Type = 3;
    pub const JSON_TRAILING_COMMA: Type = 4;
    pub const JSON_TOO_MUCH_NESTING: Type = 5;
    pub const JSON_UNEXPECTED_DATA_AFTER_ROOT: Type = 6;
    pub const JSON_UNSUPPORTED_ENCODING: Type = 7;
    pub const JSON_UNQUOTED_DICTIONARY_KEY: Type = 8;
    pub const JSON_PARSE_ERROR_COUNT: Type = 9;
}
pub mod cef_json_writer_options_t {
    pub type Type = i32;
    pub const JSON_WRITER_DEFAULT: Type = 0;
    pub const JSON_WRITER_OMIT_BINARY_VALUES: Type = 1;
    pub const JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION: Type = 2;
    pub const JSON_WRITER_PRETTY_PRINT: Type = 4;
}
pub mod cef_pdf_print_margin_type_t {
    pub type Type = i32;
    pub const PDF_PRINT_MARGIN_DEFAULT: Type = 0;
    pub const PDF_PRINT_MARGIN_NONE: Type = 1;
    pub const PDF_PRINT_MARGIN_MINIMUM: Type = 2;
    pub const PDF_PRINT_MARGIN_CUSTOM: Type = 3;
}
#[repr(C)]
pub struct _cef_pdf_print_settings_t {
    pub header_footer_title: cef_string_t,
    pub header_footer_url: cef_string_t,
    pub page_width: ::std::os::raw::c_int,
    pub page_height: ::std::os::raw::c_int,
    pub scale_factor: ::std::os::raw::c_int,
    pub __bindgen_padding_0: u32,
    pub margin_top: f64,
    pub margin_right: f64,
    pub margin_bottom: f64,
    pub margin_left: f64,
    pub margin_type: cef_pdf_print_margin_type_t::Type,
    pub header_footer_enabled: ::std::os::raw::c_int,
    pub selection_only: ::std::os::raw::c_int,
    pub landscape: ::std::os::raw::c_int,
    pub backgrounds_enabled: ::std::os::raw::c_int,
    pub __bindgen_padding_1: u32,
}
pub type cef_pdf_print_settings_t = _cef_pdf_print_settings_t;
pub mod cef_scale_factor_t {
    pub type Type = i32;
    pub const SCALE_FACTOR_NONE: Type = 0;
    pub const SCALE_FACTOR_100P: Type = 1;
    pub const SCALE_FACTOR_125P: Type = 2;
    pub const SCALE_FACTOR_133P: Type = 3;
    pub const SCALE_FACTOR_140P: Type = 4;
    pub const SCALE_FACTOR_150P: Type = 5;
    pub const SCALE_FACTOR_180P: Type = 6;
    pub const SCALE_FACTOR_200P: Type = 7;
    pub const SCALE_FACTOR_250P: Type = 8;
    pub const SCALE_FACTOR_300P: Type = 9;
}
pub mod cef_plugin_policy_t {
    pub type Type = i32;
    pub const PLUGIN_POLICY_ALLOW: Type = 0;
    pub const PLUGIN_POLICY_DETECT_IMPORTANT: Type = 1;
    pub const PLUGIN_POLICY_BLOCK: Type = 2;
    pub const PLUGIN_POLICY_DISABLE: Type = 3;
}
pub mod cef_referrer_policy_t {
    pub type Type = i32;
    pub const REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE: Type = 0;
    pub const REFERRER_POLICY_DEFAULT: Type = 0;
    pub const REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN: Type = 1;
    pub const REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN: Type = 2;
    pub const REFERRER_POLICY_NEVER_CLEAR_REFERRER: Type = 3;
    pub const REFERRER_POLICY_ORIGIN: Type = 4;
    pub const REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN: Type = 5;
    pub const REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE: Type = 6;
    pub const REFERRER_POLICY_NO_REFERRER: Type = 7;
    pub const REFERRER_POLICY_LAST_VALUE: Type = 7;
}
pub mod cef_response_filter_status_t {
    pub type Type = i32;
    pub const RESPONSE_FILTER_NEED_MORE_DATA: Type = 0;
    pub const RESPONSE_FILTER_DONE: Type = 1;
    pub const RESPONSE_FILTER_ERROR: Type = 2;
}
pub mod cef_color_type_t {
    pub type Type = i32;
    pub const CEF_COLOR_TYPE_RGBA_8888: Type = 0;
    pub const CEF_COLOR_TYPE_BGRA_8888: Type = 1;
}
pub mod cef_alpha_type_t {
    pub type Type = i32;
    pub const CEF_ALPHA_TYPE_OPAQUE: Type = 0;
    pub const CEF_ALPHA_TYPE_PREMULTIPLIED: Type = 1;
    pub const CEF_ALPHA_TYPE_POSTMULTIPLIED: Type = 2;
}
pub mod cef_text_style_t {
    pub type Type = i32;
    pub const CEF_TEXT_STYLE_BOLD: Type = 0;
    pub const CEF_TEXT_STYLE_ITALIC: Type = 1;
    pub const CEF_TEXT_STYLE_STRIKE: Type = 2;
    pub const CEF_TEXT_STYLE_DIAGONAL_STRIKE: Type = 3;
    pub const CEF_TEXT_STYLE_UNDERLINE: Type = 4;
}
pub mod cef_main_axis_alignment_t {
    pub type Type = i32;
    pub const CEF_MAIN_AXIS_ALIGNMENT_START: Type = 0;
    pub const CEF_MAIN_AXIS_ALIGNMENT_CENTER: Type = 1;
    pub const CEF_MAIN_AXIS_ALIGNMENT_END: Type = 2;
}
pub mod cef_cross_axis_alignment_t {
    pub type Type = i32;
    pub const CEF_CROSS_AXIS_ALIGNMENT_STRETCH: Type = 0;
    pub const CEF_CROSS_AXIS_ALIGNMENT_START: Type = 1;
    pub const CEF_CROSS_AXIS_ALIGNMENT_CENTER: Type = 2;
    pub const CEF_CROSS_AXIS_ALIGNMENT_END: Type = 3;
}
#[repr(C)]
pub struct _cef_box_layout_settings_t {
    pub horizontal: ::std::os::raw::c_int,
    pub inside_border_horizontal_spacing: ::std::os::raw::c_int,
    pub inside_border_vertical_spacing: ::std::os::raw::c_int,
    pub inside_border_insets: cef_insets_t,
    pub between_child_spacing: ::std::os::raw::c_int,
    pub main_axis_alignment: cef_main_axis_alignment_t::Type,
    pub cross_axis_alignment: cef_cross_axis_alignment_t::Type,
    pub minimum_cross_axis_size: ::std::os::raw::c_int,
    pub default_flex: ::std::os::raw::c_int,
}
pub type cef_box_layout_settings_t = _cef_box_layout_settings_t;
pub mod cef_button_state_t {
    pub type Type = i32;
    pub const CEF_BUTTON_STATE_NORMAL: Type = 0;
    pub const CEF_BUTTON_STATE_HOVERED: Type = 1;
    pub const CEF_BUTTON_STATE_PRESSED: Type = 2;
    pub const CEF_BUTTON_STATE_DISABLED: Type = 3;
}
pub mod cef_horizontal_alignment_t {
    pub type Type = i32;
    pub const CEF_HORIZONTAL_ALIGNMENT_LEFT: Type = 0;
    pub const CEF_HORIZONTAL_ALIGNMENT_CENTER: Type = 1;
    pub const CEF_HORIZONTAL_ALIGNMENT_RIGHT: Type = 2;
}
pub mod cef_menu_anchor_position_t {
    pub type Type = i32;
    pub const CEF_MENU_ANCHOR_TOPLEFT: Type = 0;
    pub const CEF_MENU_ANCHOR_TOPRIGHT: Type = 1;
    pub const CEF_MENU_ANCHOR_BOTTOMCENTER: Type = 2;
}
pub mod cef_menu_color_type_t {
    pub type Type = i32;
    pub const CEF_MENU_COLOR_TEXT: Type = 0;
    pub const CEF_MENU_COLOR_TEXT_HOVERED: Type = 1;
    pub const CEF_MENU_COLOR_TEXT_ACCELERATOR: Type = 2;
    pub const CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED: Type = 3;
    pub const CEF_MENU_COLOR_BACKGROUND: Type = 4;
    pub const CEF_MENU_COLOR_BACKGROUND_HOVERED: Type = 5;
    pub const CEF_MENU_COLOR_COUNT: Type = 6;
}
pub mod cef_ssl_version_t {
    pub type Type = i32;
    pub const SSL_CONNECTION_VERSION_UNKNOWN: Type = 0;
    pub const SSL_CONNECTION_VERSION_SSL2: Type = 1;
    pub const SSL_CONNECTION_VERSION_SSL3: Type = 2;
    pub const SSL_CONNECTION_VERSION_TLS1: Type = 3;
    pub const SSL_CONNECTION_VERSION_TLS1_1: Type = 4;
    pub const SSL_CONNECTION_VERSION_TLS1_2: Type = 5;
    pub const SSL_CONNECTION_VERSION_TLS1_3: Type = 6;
    pub const SSL_CONNECTION_VERSION_QUIC: Type = 7;
}
pub mod cef_ssl_content_status_t {
    pub type Type = i32;
    pub const SSL_CONTENT_NORMAL_CONTENT: Type = 0;
    pub const SSL_CONTENT_DISPLAYED_INSECURE_CONTENT: Type = 1;
    pub const SSL_CONTENT_RAN_INSECURE_CONTENT: Type = 2;
}
pub mod cef_scheme_options_t {
    pub type Type = i32;
    pub const CEF_SCHEME_OPTION_NONE: Type = 0;
    pub const CEF_SCHEME_OPTION_STANDARD: Type = 1;
    pub const CEF_SCHEME_OPTION_LOCAL: Type = 2;
    pub const CEF_SCHEME_OPTION_DISPLAY_ISOLATED: Type = 4;
    pub const CEF_SCHEME_OPTION_SECURE: Type = 8;
    pub const CEF_SCHEME_OPTION_CORS_ENABLED: Type = 16;
    pub const CEF_SCHEME_OPTION_CSP_BYPASSING: Type = 32;
    pub const CEF_SCHEME_OPTION_FETCH_ENABLED: Type = 64;
}
pub mod cef_cdm_registration_error_t {
    pub type Type = i32;
    pub const CEF_CDM_REGISTRATION_ERROR_NONE: Type = 0;
    pub const CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS: Type = 1;
    pub const CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE: Type = 2;
    pub const CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED: Type = 3;
}
#[repr(C)]
pub struct _cef_composition_underline_t {
    pub range: cef_range_t,
    pub color: cef_color_t,
    pub background_color: cef_color_t,
    pub thick: ::std::os::raw::c_int,
}
pub type cef_composition_underline_t = _cef_composition_underline_t;
pub mod cef_channel_layout_t {
    pub type Type = i32;
    pub const CEF_CHANNEL_LAYOUT_NONE: Type = 0;
    pub const CEF_CHANNEL_LAYOUT_UNSUPPORTED: Type = 1;
    pub const CEF_CHANNEL_LAYOUT_MONO: Type = 2;
    pub const CEF_CHANNEL_LAYOUT_STEREO: Type = 3;
    pub const CEF_CHANNEL_LAYOUT_2_1: Type = 4;
    pub const CEF_CHANNEL_LAYOUT_SURROUND: Type = 5;
    pub const CEF_CHANNEL_LAYOUT_4_0: Type = 6;
    pub const CEF_CHANNEL_LAYOUT_2_2: Type = 7;
    pub const CEF_CHANNEL_LAYOUT_QUAD: Type = 8;
    pub const CEF_CHANNEL_LAYOUT_5_0: Type = 9;
    pub const CEF_CHANNEL_LAYOUT_5_1: Type = 10;
    pub const CEF_CHANNEL_LAYOUT_5_0_BACK: Type = 11;
    pub const CEF_CHANNEL_LAYOUT_5_1_BACK: Type = 12;
    pub const CEF_CHANNEL_LAYOUT_7_0: Type = 13;
    pub const CEF_CHANNEL_LAYOUT_7_1: Type = 14;
    pub const CEF_CHANNEL_LAYOUT_7_1_WIDE: Type = 15;
    pub const CEF_CHANNEL_LAYOUT_STEREO_DOWNMIX: Type = 16;
    pub const CEF_CHANNEL_LAYOUT_2POINT1: Type = 17;
    pub const CEF_CHANNEL_LAYOUT_3_1: Type = 18;
    pub const CEF_CHANNEL_LAYOUT_4_1: Type = 19;
    pub const CEF_CHANNEL_LAYOUT_6_0: Type = 20;
    pub const CEF_CHANNEL_LAYOUT_6_0_FRONT: Type = 21;
    pub const CEF_CHANNEL_LAYOUT_HEXAGONAL: Type = 22;
    pub const CEF_CHANNEL_LAYOUT_6_1: Type = 23;
    pub const CEF_CHANNEL_LAYOUT_6_1_BACK: Type = 24;
    pub const CEF_CHANNEL_LAYOUT_6_1_FRONT: Type = 25;
    pub const CEF_CHANNEL_LAYOUT_7_0_FRONT: Type = 26;
    pub const CEF_CHANNEL_LAYOUT_7_1_WIDE_BACK: Type = 27;
    pub const CEF_CHANNEL_LAYOUT_OCTAGONAL: Type = 28;
    pub const CEF_CHANNEL_LAYOUT_DISCRETE: Type = 29;
    pub const CEF_CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC: Type = 30;
    pub const CEF_CHANNEL_LAYOUT_4_1_QUAD_SIDE: Type = 31;
    pub const CEF_CHANNEL_LAYOUT_BITSTREAM: Type = 32;
    pub const CEF_CHANNEL_LAYOUT_MAX: Type = 32;
}
#[repr(C)]
pub struct _cef_base_ref_counted_t {
    pub size: usize,
    pub add_ref:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_base_ref_counted_t)>,
    pub release: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    pub has_one_ref: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    pub has_at_least_one_ref: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[repr(C)]
pub struct _cef_base_scoped_t {
    pub size: usize,
    pub del: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_base_scoped_t)>,
}
pub type cef_base_scoped_t = _cef_base_scoped_t;
#[repr(C)]
pub struct _cef_command_line_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> *mut _cef_command_line_t,
    >,
    pub init_from_argv: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ),
    >,
    pub init_from_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            command_line: *const cef_string_t,
        ),
    >,
    pub reset: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t)>,
    pub get_argv: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, argv: cef_string_list_t),
    >,
    pub get_command_line_string: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    pub get_program: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    pub set_program: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, program: *const cef_string_t),
    >,
    pub has_switches: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub has_switch: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_switch_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_switches: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, switches: cef_string_map_t),
    >,
    pub append_switch: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, name: *const cef_string_t),
    >,
    pub append_switch_with_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
        ),
    >,
    pub has_arguments: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub get_arguments: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, arguments: cef_string_list_t),
    >,
    pub append_argument: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, argument: *const cef_string_t),
    >,
    pub prepend_wrapper: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, wrapper: *const cef_string_t),
    >,
}
pub type cef_command_line_t = _cef_command_line_t;

#[repr(C)]
pub struct _cef_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> cef_value_type_t::Type,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub get_double:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> f64>,
    pub get_string: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_value_t = _cef_value_t;

#[repr(C)]
pub struct _cef_binary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_binary_value_t) -> usize>,
    pub get_data: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize,
        ) -> usize,
    >,
}
pub type cef_binary_value_t = _cef_binary_value_t;

#[repr(C)]
pub struct _cef_dictionary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_size: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> usize,
    >,
    pub clear: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub has_key: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_value_type_t::Type,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_dictionary_value_t = _cef_dictionary_value_t;

#[repr(C)]
pub struct _cef_list_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t,
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> cef_value_type_t::Type,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t, index: usize) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_list_value_t = _cef_list_value_t;

#[repr(C)]
pub struct _cef_image_t {
    pub base: cef_base_ref_counted_t,
    pub is_empty: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_image_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            that: *mut _cef_image_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_bitmap: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            pixel_width: ::std::os::raw::c_int,
            pixel_height: ::std::os::raw::c_int,
            color_type: cef_color_type_t::Type,
            alpha_type: cef_alpha_type_t::Type,
            pixel_data: *const ::std::os::raw::c_void,
            pixel_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_png: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            png_data: *const ::std::os::raw::c_void,
            png_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_jpeg: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            jpeg_data: *const ::std::os::raw::c_void,
            jpeg_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_width:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_image_t) -> usize>,
    pub get_height:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_image_t) -> usize>,
    pub has_representation: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_representation: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_representation_info: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            actual_scale_factor: *mut f32,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_bitmap: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            color_type: cef_color_type_t::Type,
            alpha_type: cef_alpha_type_t::Type,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_png: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            with_transparency: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_jpeg: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            quality: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
}
pub type cef_image_t = _cef_image_t;

#[repr(C)]
pub struct _cef_read_handler_t {
    pub base: cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_read_handler_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_read_handler_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_read_handler_t) -> int64>,
    pub eof: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_read_handler_t = _cef_read_handler_t;
#[repr(C)]
pub struct _cef_stream_reader_t {
    pub base: cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_stream_reader_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_stream_reader_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_reader_t) -> int64,
    >,
    pub eof: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_stream_reader_t = _cef_stream_reader_t;

#[repr(C)]
pub struct _cef_write_handler_t {
    pub base: cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_write_handler_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_write_handler_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_write_handler_t) -> int64,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_write_handler_t = _cef_write_handler_t;
#[repr(C)]
pub struct _cef_stream_writer_t {
    pub base: cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_stream_writer_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_stream_writer_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_writer_t) -> int64,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_stream_writer_t = _cef_stream_writer_t;

#[repr(C)]
pub struct _cef_drag_data_t {
    pub base: cef_base_ref_counted_t,
    pub clone: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_drag_data_t,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_link: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_fragment: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_file: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_link_title: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_link_metadata: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_html: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_base_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_file_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_file_contents: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_data_t,
            writer: *mut _cef_stream_writer_t,
        ) -> usize,
    >,
    pub get_file_names: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_data_t,
            names: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_link_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, url: *const cef_string_t),
    >,
    pub set_link_title: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, title: *const cef_string_t),
    >,
    pub set_link_metadata: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, data: *const cef_string_t),
    >,
    pub set_fragment_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, text: *const cef_string_t),
    >,
    pub set_fragment_html: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, html: *const cef_string_t),
    >,
    pub set_fragment_base_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, base_url: *const cef_string_t),
    >,
    pub reset_file_contents:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t)>,
    pub add_file: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_data_t,
            path: *const cef_string_t,
            display_name: *const cef_string_t,
        ),
    >,
    pub get_image: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_image_t,
    >,
    pub get_image_hotspot: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_point_t,
    >,
    pub has_image: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_drag_data_t = _cef_drag_data_t;

#[repr(C)]
pub struct _cef_domvisitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domvisitor_t,
            document: *mut _cef_domdocument_t,
        ),
    >,
}
pub type cef_domvisitor_t = _cef_domvisitor_t;
#[repr(C)]
pub struct _cef_domdocument_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_dom_document_type_t::Type,
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_body: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_head: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_element_by_id: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domdocument_t,
            id: *const cef_string_t,
        ) -> *mut _cef_domnode_t,
    >,
    pub get_focused_node: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub has_selection: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_start_offset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_end_offset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_as_markup: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_selection_as_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_base_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_complete_url: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domdocument_t,
            partialURL: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
}
pub type cef_domdocument_t = _cef_domdocument_t;
#[repr(C)]
pub struct _cef_domnode_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_dom_node_type_t::Type,
    >,
    pub is_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_element: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_form_control_element: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_form_control_element_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            that: *mut _cef_domnode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_markup: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domdocument_t,
    >,
    pub get_parent: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_previous_sibling: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_next_sibling: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub has_children: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_first_child: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_last_child: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_element_tag_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub has_element_attributes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub has_element_attribute: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_attribute: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_element_attributes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t, attrMap: cef_string_map_t),
    >,
    pub set_element_attribute: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_inner_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_element_bounds:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_rect_t>,
}
pub type cef_domnode_t = _cef_domnode_t;
#[repr(C)]
pub struct _cef_process_message_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_process_message_t,
        ) -> *mut _cef_process_message_t,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_process_message_t) -> cef_string_userfree_t,
    >,
    pub get_argument_list: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_process_message_t) -> *mut _cef_list_value_t,
    >,
}
pub type cef_process_message_t = _cef_process_message_t;

#[repr(C)]
pub struct _cef_request_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    pub get_method: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_method: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, method: *const cef_string_t),
    >,
    pub set_referrer: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t::Type,
        ),
    >,
    pub get_referrer_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub get_referrer_policy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t::Type,
    >,
    pub get_post_data: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t,
    >,
    pub set_post_data: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t),
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub set: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t,
        ),
    >,
    pub get_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    pub set_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int),
    >,
    pub get_first_party_for_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_first_party_for_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    pub get_resource_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_resource_type_t::Type,
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_transition_type_t::Type,
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> uint64>,
}
pub type cef_request_t = _cef_request_t;

#[repr(C)]
pub struct _cef_post_data_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    pub has_excluded_elements: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    pub get_element_count:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_post_data_t) -> usize>,
    pub get_elements: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t,
        ),
    >,
    pub remove_element: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_element: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_elements:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_post_data_t)>,
}
pub type cef_post_data_t = _cef_post_data_t;

#[repr(C)]
pub struct _cef_post_data_element_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int,
    >,
    pub set_to_empty:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_post_data_element_t)>,
    pub set_to_file: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_element_t,
            fileName: *const cef_string_t,
        ),
    >,
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *const ::std::os::raw::c_void,
        ),
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_element_t,
        ) -> cef_postdataelement_type_t::Type,
    >,
    pub get_file: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t,
    >,
    pub get_bytes_count: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_element_t) -> usize,
    >,
    pub get_bytes: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
}
pub type cef_post_data_element_t = _cef_post_data_element_t;

#[repr(C)]
pub struct _cef_string_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_string_visitor_t, string: *const cef_string_t),
    >,
}
pub type cef_string_visitor_t = _cef_string_visitor_t;
#[repr(C)]
pub struct _cef_urlrequest_client_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_urlrequest_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub undo: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    pub redo: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    pub cut: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    pub copy: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    pub paste: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    pub del: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    pub select_all: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    pub view_source: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    pub get_source: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    pub load_request: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, request: *mut _cef_request_t),
    >,
    pub load_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, url: *const cef_string_t),
    >,
    pub load_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_frame_t,
            string_val: *const cef_string_t,
            url: *const cef_string_t,
        ),
    >,
    pub execute_java_script: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_frame_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
        ),
    >,
    pub is_main: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_focused: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> int64>,
    pub get_parent: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> *mut _cef_frame_t,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> *mut _cef_browser_t,
    >,
    pub get_v8context: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> *mut _cef_v8context_t,
    >,
    pub visit_dom: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_domvisitor_t),
    >,
    pub create_urlrequest: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            client: *mut _cef_urlrequest_client_t,
        ) -> *mut _cef_urlrequest_t,
    >,
    pub send_process_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_frame_t,
            target_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ),
    >,
}
pub type cef_frame_t = _cef_frame_t;
#[repr(C)]
pub struct _cef_x509cert_principal_t {
    pub base: cef_base_ref_counted_t,
    pub get_display_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_common_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_locality_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_state_or_province_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_country_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_street_addresses: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509cert_principal_t,
            addresses: cef_string_list_t,
        ),
    >,
    pub get_organization_names: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    pub get_organization_unit_names: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    pub get_domain_components: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509cert_principal_t,
            components: cef_string_list_t,
        ),
    >,
}
pub type cef_x509cert_principal_t = _cef_x509cert_principal_t;
#[repr(C)]
pub struct _cef_x509certificate_t {
    pub base: cef_base_ref_counted_t,
    pub get_subject: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509certificate_t,
        ) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_issuer: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509certificate_t,
        ) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_serial_number: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_valid_start: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    pub get_valid_expiry: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    pub get_derencoded: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_pemencoded: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_issuer_chain_size: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> usize,
    >,
    pub get_derencoded_issuer_chain: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
    pub get_pemencoded_issuer_chain: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
}
pub type cef_x509certificate_t = _cef_x509certificate_t;
#[repr(C)]
pub struct _cef_sslstatus_t {
    pub base: cef_base_ref_counted_t,
    pub is_secure_connection: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> ::std::os::raw::c_int,
    >,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> cef_cert_status_t::Type,
    >,
    pub get_sslversion: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_version_t::Type,
    >,
    pub get_content_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_content_status_t::Type,
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> *mut _cef_x509certificate_t,
    >,
}
pub type cef_sslstatus_t = _cef_sslstatus_t;
#[repr(C)]
pub struct _cef_navigation_entry_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_display_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_navigation_entry_t,
        ) -> cef_transition_type_t::Type,
    >,
    pub has_post_data: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_completion_time: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_time_t,
    >,
    pub get_http_status_code: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_sslstatus: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> *mut _cef_sslstatus_t,
    >,
}
pub type cef_navigation_entry_t = _cef_navigation_entry_t;
#[repr(C)]
pub struct _cef_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_callback_t)>,
    pub cancel: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_callback_t)>,
}
pub type cef_callback_t = _cef_callback_t;
#[repr(C)]
pub struct _cef_completion_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_completion_callback_t)>,
}
pub type cef_completion_callback_t = _cef_completion_callback_t;
#[repr(C)]
pub struct _cef_cookie_manager_t {
    pub base: cef_base_ref_counted_t,
    pub set_supported_schemes: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            schemes: cef_string_list_t,
            include_defaults: ::std::os::raw::c_int,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_cookie: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush_store: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_cookie_manager_t = _cef_cookie_manager_t;

#[repr(C)]
pub struct _cef_cookie_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_cookie_visitor_t = _cef_cookie_visitor_t;
#[repr(C)]
pub struct _cef_set_cookie_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_set_cookie_callback_t,
            success: ::std::os::raw::c_int,
        ),
    >,
}
pub type cef_set_cookie_callback_t = _cef_set_cookie_callback_t;
#[repr(C)]
pub struct _cef_delete_cookies_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_delete_cookies_callback_t,
            num_deleted: ::std::os::raw::c_int,
        ),
    >,
}
pub type cef_delete_cookies_callback_t = _cef_delete_cookies_callback_t;
#[repr(C)]
pub struct _cef_extension_t {
    pub base: cef_base_ref_counted_t,
    pub get_identifier: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    pub get_path: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    pub get_manifest: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> *mut _cef_dictionary_value_t,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_t,
            that: *mut _cef_extension_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> *mut _cef_extension_handler_t,
    >,
    pub get_loader_context: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> *mut _cef_request_context_t,
    >,
    pub is_loaded: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> ::std::os::raw::c_int,
    >,
    pub unload: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_extension_t)>,
}
pub type cef_extension_t = _cef_extension_t;
#[repr(C)]
pub struct _cef_get_extension_resource_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_get_extension_resource_callback_t,
            stream: *mut _cef_stream_reader_t,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_get_extension_resource_callback_t),
    >,
}
pub type cef_get_extension_resource_callback_t = _cef_get_extension_resource_callback_t;
#[repr(C)]
pub struct _cef_extension_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_extension_load_failed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            result: cef_errorcode_t::Type,
        ),
    >,
    pub on_extension_loaded: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    pub on_extension_unloaded: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    pub on_before_background_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            url: *const cef_string_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            active_browser: *mut _cef_browser_t,
            index: ::std::os::raw::c_int,
            url: *const cef_string_t,
            active: ::std::os::raw::c_int,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_active_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
        ) -> *mut _cef_browser_t,
    >,
    pub can_access_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
            target_browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension_resource: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            file: *const cef_string_t,
            callback: *mut _cef_get_extension_resource_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_extension_handler_t = _cef_extension_handler_t;
#[repr(C)]
pub struct _cef_request_context_handler_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_resolve_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t::Type,
            resolved_ips: cef_string_list_t,
        ),
    >,
}
pub type cef_resolve_callback_t = _cef_resolve_callback_t;
#[repr(C)]
pub struct _cef_request_context_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_global: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
        ) -> *mut _cef_request_context_handler_t,
    >,
    pub get_cache_path: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t,
    >,
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_cookie_manager_t,
    >,
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_scheme_handler_factories: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    pub purge_plugin_list_cache: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            reload_pages: ::std::os::raw::c_int,
        ),
    >,
    pub has_preference: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_preference: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            include_defaults: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub can_set_preference: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_preference: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub close_all_connections: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub resolve_host: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t,
        ),
    >,
    pub load_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            root_directory: *const cef_string_t,
            manifest: *mut _cef_dictionary_value_t,
            handler: *mut _cef_extension_handler_t,
        ),
    >,
    pub did_load_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extensions: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            extension_ids: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> *mut _cef_extension_t,
    >,
}
pub type cef_request_context_t = _cef_request_context_t;

#[repr(C)]
pub struct _cef_browser_t {
    pub base: cef_base_ref_counted_t,
    pub get_host: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> *mut _cef_browser_host_t,
    >,
    pub can_go_back: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub go_back: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    pub can_go_forward: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub go_forward: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    pub is_loading: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub reload: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    pub reload_ignore_cache:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    pub stop_load: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    pub get_identifier: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_t,
            that: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_popup: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub has_document: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub get_main_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    pub get_focused_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    pub get_frame_byident: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_t,
            identifier: int64,
        ) -> *mut _cef_frame_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_t,
            name: *const cef_string_t,
        ) -> *mut _cef_frame_t,
    >,
    pub get_frame_count:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> usize>,
    pub get_frame_identifiers: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_t,
            identifiersCount: *mut usize,
            identifiers: *mut int64,
        ),
    >,
    pub get_frame_names: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t, names: cef_string_list_t),
    >,
}
pub type cef_browser_t = _cef_browser_t;
#[repr(C)]
pub struct _cef_run_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog_dismissed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_run_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
}
pub type cef_run_file_dialog_callback_t = _cef_run_file_dialog_callback_t;
#[repr(C)]
pub struct _cef_navigation_entry_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_navigation_entry_visitor_t,
            entry: *mut _cef_navigation_entry_t,
            current: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_navigation_entry_visitor_t = _cef_navigation_entry_visitor_t;
#[repr(C)]
pub struct _cef_pdf_print_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_pdf_print_finished: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_pdf_print_callback_t,
            path: *const cef_string_t,
            ok: ::std::os::raw::c_int,
        ),
    >,
}
pub type cef_pdf_print_callback_t = _cef_pdf_print_callback_t;
#[repr(C)]
pub struct _cef_download_image_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_download_image_finished: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_download_image_callback_t,
            image_url: *const cef_string_t,
            http_status_code: ::std::os::raw::c_int,
            image: *mut _cef_image_t,
        ),
    >,
}
pub type cef_download_image_callback_t = _cef_download_image_callback_t;
#[repr(C)]
pub struct _cef_browser_host_t {
    pub base: cef_base_ref_counted_t,
    pub get_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_browser_t,
    >,
    pub close_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            force_close: ::std::os::raw::c_int,
        ),
    >,
    pub try_close_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_focus: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, focus: ::std::os::raw::c_int),
    >,
    pub get_window_handle:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> HWND>,
    pub get_opener_window_handle:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> HWND>,
    pub has_view: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub get_client: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_client_t,
    >,
    pub get_request_context: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_request_context_t,
    >,
    pub get_zoom_level:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> f64>,
    pub set_zoom_level: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, zoomLevel: f64),
    >,
    pub run_file_dialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            mode: cef_file_dialog_mode_t::Type,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_run_file_dialog_callback_t,
        ),
    >,
    pub start_download: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, url: *const cef_string_t),
    >,
    pub download_image: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            image_url: *const cef_string_t,
            is_favicon: ::std::os::raw::c_int,
            max_image_size: uint32,
            bypass_cache: ::std::os::raw::c_int,
            callback: *mut _cef_download_image_callback_t,
        ),
    >,
    pub print: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub print_to_pdf: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            path: *const cef_string_t,
            settings: *const _cef_pdf_print_settings_t,
            callback: *mut _cef_pdf_print_callback_t,
        ),
    >,
    pub find: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            identifier: ::std::os::raw::c_int,
            searchText: *const cef_string_t,
            forward: ::std::os::raw::c_int,
            matchCase: ::std::os::raw::c_int,
            findNext: ::std::os::raw::c_int,
        ),
    >,
    pub stop_finding: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            clearSelection: ::std::os::raw::c_int,
        ),
    >,
    pub show_dev_tools: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            windowInfo: *const _cef_window_info_t,
            client: *mut _cef_client_t,
            settings: *const _cef_browser_settings_t,
            inspect_element_at: *const cef_point_t,
        ),
    >,
    pub close_dev_tools:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub has_dev_tools: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub get_navigation_entries: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            visitor: *mut _cef_navigation_entry_visitor_t,
            current_only: ::std::os::raw::c_int,
        ),
    >,
    pub set_mouse_cursor_change_disabled: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            disabled: ::std::os::raw::c_int,
        ),
    >,
    pub is_mouse_cursor_change_disabled: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub replace_misspelling: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    pub add_word_to_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    pub is_window_rendering_disabled: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub was_resized:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub was_hidden: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, hidden: ::std::os::raw::c_int),
    >,
    pub notify_screen_info_changed:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub invalidate: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            type_: cef_paint_element_type_t::Type,
        ),
    >,
    pub send_external_begin_frame:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub send_key_event: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, event: *const _cef_key_event_t),
    >,
    pub send_mouse_click_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            type_: cef_mouse_button_type_t::Type,
            mouseUp: ::std::os::raw::c_int,
            clickCount: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_move_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            mouseLeave: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_wheel_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            deltaX: ::std::os::raw::c_int,
            deltaY: ::std::os::raw::c_int,
        ),
    >,
    pub send_touch_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_touch_event_t,
        ),
    >,
    pub send_focus_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            setFocus: ::std::os::raw::c_int,
        ),
    >,
    pub send_capture_lost_event:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub notify_move_or_resize_started:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub get_windowless_frame_rate: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_windowless_frame_rate: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            frame_rate: ::std::os::raw::c_int,
        ),
    >,
    pub ime_set_composition: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            underlinesCount: usize,
            underlines: *const cef_composition_underline_t,
            replacement_range: *const cef_range_t,
            selection_range: *const cef_range_t,
        ),
    >,
    pub ime_commit_text: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            replacement_range: *const cef_range_t,
            relative_cursor_pos: ::std::os::raw::c_int,
        ),
    >,
    pub ime_finish_composing_text: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            keep_selection: ::std::os::raw::c_int,
        ),
    >,
    pub ime_cancel_composition:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drag_enter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            drag_data: *mut _cef_drag_data_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t::Type,
        ),
    >,
    pub drag_target_drag_over: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t::Type,
        ),
    >,
    pub drag_target_drag_leave:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drop: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
        ),
    >,
    pub drag_source_ended_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: cef_drag_operations_mask_t::Type,
        ),
    >,
    pub drag_source_system_drag_ended:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    pub get_visible_navigation_entry: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_navigation_entry_t,
    >,
    pub set_accessibility_state: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            accessibility_state: cef_state_t::Type,
        ),
    >,
    pub set_auto_resize_enabled: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            enabled: ::std::os::raw::c_int,
            min_size: *const cef_size_t,
            max_size: *const cef_size_t,
        ),
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_extension_t,
    >,
    pub is_background_host: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_audio_muted: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, mute: ::std::os::raw::c_int),
    >,
    pub is_audio_muted: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_browser_host_t = _cef_browser_host_t;

#[repr(C)]
pub struct _cef_print_settings_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> *mut _cef_print_settings_t,
    >,
    pub set_orientation: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            landscape: ::std::os::raw::c_int,
        ),
    >,
    pub is_landscape: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_printer_printable_area: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            physical_size_device_units: *const cef_size_t,
            printable_area_device_units: *const cef_rect_t,
            landscape_needs_flip: ::std::os::raw::c_int,
        ),
    >,
    pub set_device_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t, name: *const cef_string_t),
    >,
    pub get_device_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> cef_string_userfree_t,
    >,
    pub set_dpi: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t, dpi: ::std::os::raw::c_int),
    >,
    pub get_dpi: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_page_ranges: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: usize,
            ranges: *const cef_range_t,
        ),
    >,
    pub get_page_ranges_count: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> usize,
    >,
    pub get_page_ranges: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: *mut usize,
            ranges: *mut cef_range_t,
        ),
    >,
    pub set_selection_only: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            selection_only: ::std::os::raw::c_int,
        ),
    >,
    pub is_selection_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_collate: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            collate: ::std::os::raw::c_int,
        ),
    >,
    pub will_collate: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_color_model: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            model: cef_color_model_t::Type,
        ),
    >,
    pub get_color_model: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> cef_color_model_t::Type,
    >,
    pub set_copies: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            copies: ::std::os::raw::c_int,
        ),
    >,
    pub get_copies: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_duplex_mode: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            mode: cef_duplex_mode_t::Type,
        ),
    >,
    pub get_duplex_mode: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> cef_duplex_mode_t::Type,
    >,
}
pub type cef_print_settings_t = _cef_print_settings_t;

#[repr(C)]
pub struct _cef_print_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_dialog_callback_t,
            settings: *mut _cef_print_settings_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_print_dialog_callback_t)>,
}
pub type cef_print_dialog_callback_t = _cef_print_dialog_callback_t;
#[repr(C)]
pub struct _cef_print_job_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_print_job_callback_t)>,
}
pub type cef_print_job_callback_t = _cef_print_job_callback_t;
#[repr(C)]
pub struct _cef_print_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_print_start: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_print_settings: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            settings: *mut _cef_print_settings_t,
            get_defaults: ::std::os::raw::c_int,
        ),
    >,
    pub on_print_dialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            has_selection: ::std::os::raw::c_int,
            callback: *mut _cef_print_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_print_job: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            document_name: *const cef_string_t,
            pdf_file_path: *const cef_string_t,
            callback: *mut _cef_print_job_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_print_reset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    pub get_pdf_paper_size: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_handler_t,
            device_units_per_inch: ::std::os::raw::c_int,
        ) -> cef_size_t,
    >,
}
pub type cef_print_handler_t = _cef_print_handler_t;
#[repr(C)]
pub struct _cef_browser_process_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_context_initialized: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_process_handler_t),
    >,
    pub on_before_child_process_launch: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    pub on_render_process_thread_created: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_process_handler_t,
            extra_info: *mut _cef_list_value_t,
        ),
    >,
    pub get_print_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_process_handler_t,
        ) -> *mut _cef_print_handler_t,
    >,
    pub on_schedule_message_pump_work: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_process_handler_t, delay_ms: int64),
    >,
}
pub type cef_browser_process_handler_t = _cef_browser_process_handler_t;
#[repr(C)]
pub struct _cef_load_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_loading_state_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            isLoading: ::std::os::raw::c_int,
            canGoBack: ::std::os::raw::c_int,
            canGoForward: ::std::os::raw::c_int,
        ),
    >,
    pub on_load_start: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            transition_type: cef_transition_type_t::Type,
        ),
    >,
    pub on_load_end: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            httpStatusCode: ::std::os::raw::c_int,
        ),
    >,
    pub on_load_error: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            errorCode: cef_errorcode_t::Type,
            errorText: *const cef_string_t,
            failedUrl: *const cef_string_t,
        ),
    >,
}
pub type cef_load_handler_t = _cef_load_handler_t;
#[repr(C)]
pub struct _cef_task_t {
    pub base: cef_base_ref_counted_t,
    pub execute: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_task_t)>,
}
pub type cef_task_t = _cef_task_t;
#[repr(C)]
pub struct _cef_task_runner_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_task_runner_t,
            that: *mut _cef_task_runner_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub belongs_to_current_thread: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_task_runner_t) -> ::std::os::raw::c_int,
    >,
    pub belongs_to_thread: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_task_runner_t,
            threadId: cef_thread_id_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_task: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_delayed_task: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
            delay_ms: int64,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_task_runner_t = _cef_task_runner_t;

#[repr(C)]
pub struct _cef_v8context_t {
    pub base: cef_base_ref_counted_t,
    pub get_task_runner: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> *mut _cef_task_runner_t,
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> *mut _cef_browser_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> *mut _cef_frame_t,
    >,
    pub get_global: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> *mut _cef_v8value_t,
    >,
    pub enter: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub exit: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8context_t,
            that: *mut _cef_v8context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub eval: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8context_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut *mut _cef_v8exception_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_v8context_t = _cef_v8context_t;

#[repr(C)]
pub struct _cef_v8handler_t {
    pub base: cef_base_ref_counted_t,
    pub execute: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8handler_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_v8handler_t = _cef_v8handler_t;
#[repr(C)]
pub struct _cef_v8accessor_t {
    pub base: cef_base_ref_counted_t,
    pub get: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_v8accessor_t = _cef_v8accessor_t;
#[repr(C)]
pub struct _cef_v8interceptor_t {
    pub base: cef_base_ref_counted_t,
    pub get_byname: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_byname: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_v8interceptor_t = _cef_v8interceptor_t;
#[repr(C)]
pub struct _cef_v8exception_t {
    pub base: cef_base_ref_counted_t,
    pub get_message: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_source_line: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_script_resource_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_start_position: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_end_position: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_start_column: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_end_column: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_v8exception_t = _cef_v8exception_t;
#[repr(C)]
pub struct _cef_v8array_buffer_release_callback_t {
    pub base: cef_base_ref_counted_t,
    pub release_buffer: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8array_buffer_release_callback_t,
            buffer: *mut ::std::os::raw::c_void,
        ),
    >,
}
pub type cef_v8array_buffer_release_callback_t = _cef_v8array_buffer_release_callback_t;
#[repr(C)]
pub struct _cef_v8value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_undefined: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_null: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_int: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_uint: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_double: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_date: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_string: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_object: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_array: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_array_buffer: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_function: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            that: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_bool_value: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_int_value:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> int32>,
    pub get_uint_value:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> uint32>,
    pub get_double_value:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> f64>,
    pub get_date_value:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> cef_time_t>,
    pub get_string_value: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    pub is_user_created: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub has_exception: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_exception: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8exception_t,
    >,
    pub clear_exception: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub will_rethrow_exceptions: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub set_rethrow_exceptions: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            rethrow: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_value_bykey: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_value_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_value_bykey: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_value_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_value_bykey: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_v8value_t,
    >,
    pub get_value_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8value_t,
    >,
    pub set_value_bykey: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            value: *mut _cef_v8value_t,
            attribute: cef_v8_propertyattribute_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_value_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
            value: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_value_byaccessor: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            settings: cef_v8_accesscontrol_t::Type,
            attribute: cef_v8_propertyattribute_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_user_data: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            user_data: *mut _cef_base_ref_counted_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_user_data: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> *mut _cef_base_ref_counted_t,
    >,
    pub get_externally_allocated_memory: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub adjust_externally_allocated_memory: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            change_in_bytes: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_array_length: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_array_buffer_release_callback: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
        ) -> *mut _cef_v8array_buffer_release_callback_t,
    >,
    pub neuter_array_buffer: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    pub get_function_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8handler_t,
    >,
    pub execute_function: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
    pub execute_function_with_context: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            context: *mut _cef_v8context_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
}
pub type cef_v8value_t = _cef_v8value_t;

#[repr(C)]
pub struct _cef_v8stack_trace_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    pub get_frame_count: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8stack_trace_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8stack_frame_t,
    >,
}
pub type cef_v8stack_trace_t = _cef_v8stack_trace_t;

#[repr(C)]
pub struct _cef_v8stack_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_script_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_script_name_or_source_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_column: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_eval: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_constructor: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_v8stack_frame_t = _cef_v8stack_frame_t;

#[repr(C)]
pub struct _cef_render_process_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_render_thread_created: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            extra_info: *mut _cef_list_value_t,
        ),
    >,
    pub on_web_kit_initialized: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_render_process_handler_t),
    >,
    pub on_browser_created: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            extra_info: *mut _cef_dictionary_value_t,
        ),
    >,
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
        ) -> *mut _cef_load_handler_t,
    >,
    pub on_context_created: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    pub on_context_released: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    pub on_uncaught_exception: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
            exception: *mut _cef_v8exception_t,
            stackTrace: *mut _cef_v8stack_trace_t,
        ),
    >,
    pub on_focused_node_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            node: *mut _cef_domnode_t,
        ),
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_render_process_handler_t = _cef_render_process_handler_t;
#[repr(C)]
pub struct _cef_resource_bundle_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_localized_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            string_id: ::std::os::raw::c_int,
            string: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_data_resource: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t::Type,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_resource_bundle_handler_t = _cef_resource_bundle_handler_t;
#[repr(C)]
pub struct _cef_response_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    pub get_error: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_errorcode_t::Type,
    >,
    pub set_error: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, error: cef_errorcode_t::Type),
    >,
    pub get_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    pub set_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int),
    >,
    pub get_status_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_status_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t),
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_mime_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t),
    >,
    pub get_charset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_charset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, charset: *const cef_string_t),
    >,
    pub get_header: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, url: *const cef_string_t),
    >,
}
pub type cef_response_t = _cef_response_t;

#[repr(C)]
pub struct _cef_resource_skip_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_resource_skip_callback_t, bytes_skipped: int64),
    >,
}
pub type cef_resource_skip_callback_t = _cef_resource_skip_callback_t;
#[repr(C)]
pub struct _cef_resource_read_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_read_callback_t,
            bytes_read: ::std::os::raw::c_int,
        ),
    >,
}
pub type cef_resource_read_callback_t = _cef_resource_read_callback_t;
#[repr(C)]
pub struct _cef_resource_handler_t {
    pub base: cef_base_ref_counted_t,
    pub open: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            handle_request: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub process_request: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_response_headers: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            response: *mut _cef_response_t,
            response_length: *mut int64,
            redirectUrl: *mut cef_string_t,
        ),
    >,
    pub skip: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            bytes_to_skip: int64,
            bytes_skipped: *mut int64,
            callback: *mut _cef_resource_skip_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_resource_read_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_response: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_resource_handler_t)>,
}
pub type cef_resource_handler_t = _cef_resource_handler_t;
#[repr(C)]
pub struct _cef_scheme_registrar_t {
    pub base: cef_base_scoped_t,
    pub add_custom_scheme: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_scheme_registrar_t,
            scheme_name: *const cef_string_t,
            options: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_scheme_registrar_t = _cef_scheme_registrar_t;
#[repr(C)]
pub struct _cef_scheme_handler_factory_t {
    pub base: cef_base_ref_counted_t,
    pub create: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_scheme_handler_factory_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            scheme_name: *const cef_string_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
}
pub type cef_scheme_handler_factory_t = _cef_scheme_handler_factory_t;

#[repr(C)]
pub struct _cef_app_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_command_line_processing: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_app_t,
            process_type: *const cef_string_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    pub on_register_custom_schemes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_app_t, registrar: *mut _cef_scheme_registrar_t),
    >,
    pub get_resource_bundle_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_app_t) -> *mut _cef_resource_bundle_handler_t,
    >,
    pub get_browser_process_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_app_t) -> *mut _cef_browser_process_handler_t,
    >,
    pub get_render_process_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_app_t) -> *mut _cef_render_process_handler_t,
    >,
}
pub type cef_app_t = _cef_app_t;

#[repr(C)]
pub struct _cef_life_span_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_popup: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_frame_name: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t::Type,
            user_gesture: ::std::os::raw::c_int,
            popupFeatures: *const _cef_popup_features_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            no_javascript_access: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_after_created: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub do_close: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_close: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
}
pub type cef_life_span_handler_t = _cef_life_span_handler_t;
#[repr(C)]
pub struct _cef_audio_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_audio_stream_started: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            audio_stream_id: ::std::os::raw::c_int,
            channels: ::std::os::raw::c_int,
            channel_layout: cef_channel_layout_t::Type,
            sample_rate: ::std::os::raw::c_int,
            frames_per_buffer: ::std::os::raw::c_int,
        ),
    >,
    pub on_audio_stream_packet: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            audio_stream_id: ::std::os::raw::c_int,
            data: *mut *const f32,
            frames: ::std::os::raw::c_int,
            pts: int64,
        ),
    >,
    pub on_audio_stream_stopped: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            audio_stream_id: ::std::os::raw::c_int,
        ),
    >,
}
pub type cef_audio_handler_t = _cef_audio_handler_t;
#[repr(C)]
pub struct _cef_menu_model_delegate_t {
    pub base: cef_base_ref_counted_t,
    pub execute_command: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t::Type,
        ),
    >,
    pub mouse_outside_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
        ),
    >,
    pub unhandled_open_submenu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int,
        ),
    >,
    pub unhandled_close_submenu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int,
        ),
    >,
    pub menu_will_show: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
        ),
    >,
    pub menu_closed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
        ),
    >,
    pub format_label: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            label: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_menu_model_delegate_t = _cef_menu_model_delegate_t;
#[repr(C)]
pub struct _cef_menu_model_t {
    pub base: cef_base_ref_counted_t,
    pub is_sub_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub clear: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub get_count: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub add_separator: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub add_item: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_check_item: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_radio_item: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_sub_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    pub insert_separator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_item_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_check_item_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_radio_item_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_sub_menu_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_index_of: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_command_id_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_command_id_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_label: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub get_label_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub set_label: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_label_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t::Type,
    >,
    pub get_type_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t::Type,
    >,
    pub get_group_id: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_group_id_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_group_id: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_group_id_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_sub_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    pub get_sub_menu_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_visible_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_visible: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_visible_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_enabled: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_enabled_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enabled: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enabled_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_checked: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_checked_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_checked: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_checked_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_accelerator: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_accelerator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_accelerator: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_accelerator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_accelerator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_accelerator: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_accelerator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_color: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_color_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_color: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_color_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_list_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_menu_model_t = _cef_menu_model_t;

#[repr(C)]
pub struct _cef_run_context_menu_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_run_context_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t::Type,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_run_context_menu_callback_t),
    >,
}
pub type cef_run_context_menu_callback_t = _cef_run_context_menu_callback_t;
#[repr(C)]
pub struct _cef_context_menu_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_context_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
        ),
    >,
    pub run_context_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
            callback: *mut _cef_run_context_menu_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_context_menu_command: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_context_menu_dismissed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
        ),
    >,
}
pub type cef_context_menu_handler_t = _cef_context_menu_handler_t;
#[repr(C)]
pub struct _cef_context_menu_params_t {
    pub base: cef_base_ref_counted_t,
    pub get_xcoord: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_ycoord: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_type_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_type_flags_t::Type,
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_unfiltered_link_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_source_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub has_image_contents: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_title_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_page_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_frame_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_frame_charset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_media_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_type_t::Type,
    >,
    pub get_media_state_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_state_flags_t::Type,
    >,
    pub get_selection_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_misspelled_word: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_dictionary_suggestions: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
            suggestions: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub is_spell_check_enabled: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_edit_state_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_edit_state_flags_t::Type,
    >,
    pub is_custom_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub is_pepper_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
}
pub type cef_context_menu_params_t = _cef_context_menu_params_t;
#[repr(C)]
pub struct _cef_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_file_dialog_callback_t)>,
}
pub type cef_file_dialog_callback_t = _cef_file_dialog_callback_t;
#[repr(C)]
pub struct _cef_dialog_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dialog_handler_t,
            browser: *mut _cef_browser_t,
            mode: cef_file_dialog_mode_t::Type,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_file_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_dialog_handler_t = _cef_dialog_handler_t;
#[repr(C)]
pub struct _cef_display_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_address_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            url: *const cef_string_t,
        ),
    >,
    pub on_title_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            title: *const cef_string_t,
        ),
    >,
    pub on_favicon_urlchange: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            icon_urls: cef_string_list_t,
        ),
    >,
    pub on_fullscreen_mode_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            fullscreen: ::std::os::raw::c_int,
        ),
    >,
    pub on_tooltip: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            text: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_status_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            value: *const cef_string_t,
        ),
    >,
    pub on_console_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            level: cef_log_severity_t::Type,
            message: *const cef_string_t,
            source: *const cef_string_t,
            line: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_auto_resize: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            new_size: *const cef_size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_loading_progress_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            progress: f64,
        ),
    >,
}
pub type cef_display_handler_t = _cef_display_handler_t;
#[repr(C)]
pub struct _cef_download_item_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_in_progress: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_canceled: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub get_current_speed: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> int64,
    >,
    pub get_percent_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub get_total_bytes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> int64,
    >,
    pub get_received_bytes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> int64,
    >,
    pub get_start_time: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_time_t,
    >,
    pub get_end_time: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_time_t,
    >,
    pub get_full_path: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_id: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> uint32,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_suggested_file_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_content_disposition: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
}
pub type cef_download_item_t = _cef_download_item_t;
#[repr(C)]
pub struct _cef_before_download_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_before_download_callback_t,
            download_path: *const cef_string_t,
            show_dialog: ::std::os::raw::c_int,
        ),
    >,
}
pub type cef_before_download_callback_t = _cef_before_download_callback_t;
#[repr(C)]
pub struct _cef_download_item_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cancel: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_callback_t),
    >,
    pub pause: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_callback_t),
    >,
    pub resume: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_callback_t),
    >,
}
pub type cef_download_item_callback_t = _cef_download_item_callback_t;
#[repr(C)]
pub struct _cef_download_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_download: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            suggested_name: *const cef_string_t,
            callback: *mut _cef_before_download_callback_t,
        ),
    >,
    pub on_download_updated: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            callback: *mut _cef_download_item_callback_t,
        ),
    >,
}
pub type cef_download_handler_t = _cef_download_handler_t;
#[repr(C)]
pub struct _cef_drag_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_drag_enter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            dragData: *mut _cef_drag_data_t,
            mask: cef_drag_operations_mask_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_draggable_regions_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t,
        ),
    >,
}
pub type cef_drag_handler_t = _cef_drag_handler_t;
#[repr(C)]
pub struct _cef_find_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_find_result: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_find_handler_t,
            browser: *mut _cef_browser_t,
            identifier: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            selectionRect: *const cef_rect_t,
            activeMatchOrdinal: ::std::os::raw::c_int,
            finalUpdate: ::std::os::raw::c_int,
        ),
    >,
}
pub type cef_find_handler_t = _cef_find_handler_t;
#[repr(C)]
pub struct _cef_focus_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_take_focus: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            next: ::std::os::raw::c_int,
        ),
    >,
    pub on_set_focus: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            source: cef_focus_source_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_got_focus: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_focus_handler_t, browser: *mut _cef_browser_t),
    >,
}
pub type cef_focus_handler_t = _cef_focus_handler_t;
#[repr(C)]
pub struct _cef_jsdialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_callback_t,
            success: ::std::os::raw::c_int,
            user_input: *const cef_string_t,
        ),
    >,
}
pub type cef_jsdialog_callback_t = _cef_jsdialog_callback_t;
#[repr(C)]
pub struct _cef_jsdialog_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_jsdialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            dialog_type: cef_jsdialog_type_t::Type,
            message_text: *const cef_string_t,
            default_prompt_text: *const cef_string_t,
            callback: *mut _cef_jsdialog_callback_t,
            suppress_message: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_unload_dialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            message_text: *const cef_string_t,
            is_reload: ::std::os::raw::c_int,
            callback: *mut _cef_jsdialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_reset_dialog_state: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub on_dialog_closed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
}
pub type cef_jsdialog_handler_t = _cef_jsdialog_handler_t;
#[repr(C)]
pub struct _cef_keyboard_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_pre_key_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut MSG,
            is_keyboard_shortcut: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_key_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut MSG,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_keyboard_handler_t = _cef_keyboard_handler_t;
#[repr(C)]
pub struct _cef_accessibility_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_accessibility_tree_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_accessibility_handler_t,
            value: *mut _cef_value_t,
        ),
    >,
    pub on_accessibility_location_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_accessibility_handler_t,
            value: *mut _cef_value_t,
        ),
    >,
}
pub type cef_accessibility_handler_t = _cef_accessibility_handler_t;
#[repr(C)]
pub struct _cef_render_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_accessibility_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
        ) -> *mut _cef_accessibility_handler_t,
    >,
    pub get_root_screen_rect: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_view_rect: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ),
    >,
    pub get_screen_point: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            viewX: ::std::os::raw::c_int,
            viewY: ::std::os::raw::c_int,
            screenX: *mut ::std::os::raw::c_int,
            screenY: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_screen_info: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            screen_info: *mut _cef_screen_info_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_popup_show: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            show: ::std::os::raw::c_int,
        ),
    >,
    pub on_popup_size: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *const cef_rect_t,
        ),
    >,
    pub on_paint: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t::Type,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            buffer: *const ::std::os::raw::c_void,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub on_accelerated_paint: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t::Type,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            shared_handle: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_cursor_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            cursor: HCURSOR,
            type_: cef_cursor_type_t::Type,
            custom_cursor_info: *const _cef_cursor_info_t,
        ),
    >,
    pub start_dragging: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            drag_data: *mut _cef_drag_data_t,
            allowed_ops: cef_drag_operations_mask_t::Type,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub update_drag_cursor: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            operation: cef_drag_operations_mask_t::Type,
        ),
    >,
    pub on_scroll_offset_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            x: f64,
            y: f64,
        ),
    >,
    pub on_ime_composition_range_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_range: *const cef_range_t,
            character_boundsCount: usize,
            character_bounds: *const cef_rect_t,
        ),
    >,
    pub on_text_selection_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_text: *const cef_string_t,
            selected_range: *const cef_range_t,
        ),
    >,
    pub on_virtual_keyboard_requested: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            input_mode: cef_text_input_mode_t::Type,
        ),
    >,
}
pub type cef_render_handler_t = _cef_render_handler_t;
#[repr(C)]
pub struct _cef_auth_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t,
        ),
    >,
    pub cancel: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_auth_callback_t)>,
}
pub type cef_auth_callback_t = _cef_auth_callback_t;
#[repr(C)]
pub struct _cef_request_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_callback_t,
            allow: ::std::os::raw::c_int,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_request_callback_t)>,
}
pub type cef_request_callback_t = _cef_request_callback_t;
#[repr(C)]
pub struct _cef_response_filter_t {
    pub base: cef_base_ref_counted_t,
    pub init_filter: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_filter_t) -> ::std::os::raw::c_int,
    >,
    pub filter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_response_filter_t,
            data_in: *mut ::std::os::raw::c_void,
            data_in_size: usize,
            data_in_read: *mut usize,
            data_out: *mut ::std::os::raw::c_void,
            data_out_size: usize,
            data_out_written: *mut usize,
        ) -> cef_response_filter_status_t::Type,
    >,
}
pub type cef_response_filter_t = _cef_response_filter_t;
#[repr(C)]
pub struct _cef_resource_request_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_cookie_access_filter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_cookie_access_filter_t,
    >,
    pub on_before_resource_load: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_request_callback_t,
        ) -> cef_return_value_t::Type,
    >,
    pub get_resource_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
    pub on_resource_redirect: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            new_url: *mut cef_string_t,
        ),
    >,
    pub on_resource_response: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_response_filter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> *mut _cef_response_filter_t,
    >,
    pub on_resource_load_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            status: cef_urlrequest_status_t::Type,
            received_content_length: int64,
        ),
    >,
    pub on_protocol_execution: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            allow_os_execution: *mut ::std::os::raw::c_int,
        ),
    >,
}
pub type cef_resource_request_handler_t = _cef_resource_request_handler_t;
#[repr(C)]
pub struct _cef_cookie_access_filter_t {
    pub base: cef_base_ref_counted_t,
    pub can_send_cookie: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub can_save_cookie: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_cookie_access_filter_t = _cef_cookie_access_filter_t;
#[repr(C)]
pub struct _cef_sslinfo_t {
    pub base: cef_base_ref_counted_t,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslinfo_t) -> cef_cert_status_t::Type,
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslinfo_t) -> *mut _cef_x509certificate_t,
    >,
}
pub type cef_sslinfo_t = _cef_sslinfo_t;

#[repr(C)]
pub struct _cef_select_client_certificate_callback_t {
    pub base: cef_base_ref_counted_t,
    pub select: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_select_client_certificate_callback_t,
            cert: *mut _cef_x509certificate_t,
        ),
    >,
}
pub type cef_select_client_certificate_callback_t = _cef_select_client_certificate_callback_t;
#[repr(C)]
pub struct _cef_request_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_browse: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            user_gesture: ::std::os::raw::c_int,
            is_redirect: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_open_urlfrom_tab: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t::Type,
            user_gesture: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_resource_request_handler_t,
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_quota_request: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            new_size: int64,
            callback: *mut _cef_request_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_certificate_error: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            cert_error: cef_errorcode_t::Type,
            request_url: *const cef_string_t,
            ssl_info: *mut _cef_sslinfo_t,
            callback: *mut _cef_request_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_select_client_certificate: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            certificatesCount: usize,
            certificates: *const *mut _cef_x509certificate_t,
            callback: *mut _cef_select_client_certificate_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_plugin_crashed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            plugin_path: *const cef_string_t,
        ),
    >,
    pub on_render_view_ready: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub on_render_process_terminated: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            status: cef_termination_status_t::Type,
        ),
    >,
}
pub type cef_request_handler_t = _cef_request_handler_t;
#[repr(C)]
pub struct _cef_client_t {
    pub base: cef_base_ref_counted_t,
    pub get_audio_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_audio_handler_t,
    >,
    pub get_context_menu_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_context_menu_handler_t,
    >,
    pub get_dialog_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_dialog_handler_t,
    >,
    pub get_display_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_display_handler_t,
    >,
    pub get_download_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_download_handler_t,
    >,
    pub get_drag_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_drag_handler_t,
    >,
    pub get_find_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_find_handler_t,
    >,
    pub get_focus_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_focus_handler_t,
    >,
    pub get_jsdialog_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_jsdialog_handler_t,
    >,
    pub get_keyboard_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_keyboard_handler_t,
    >,
    pub get_life_span_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_life_span_handler_t,
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_load_handler_t,
    >,
    pub get_render_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_render_handler_t,
    >,
    pub get_request_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_request_handler_t,
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_client_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type cef_client_t = _cef_client_t;

extern "C" {
    pub fn cef_shutdown();
    pub fn cef_do_message_loop_work();
    pub fn cef_run_message_loop();
    pub fn cef_quit_message_loop();
    pub fn cef_set_osmodal_loop(osModalLoop: ::std::os::raw::c_int);
    pub fn cef_enable_highdpi_support();

    pub fn cef_menu_model_create(
        delegate: *mut _cef_menu_model_delegate_t,
    ) -> *mut cef_menu_model_t;

    pub fn cef_is_cert_status_error(status: cef_cert_status_t::Type) -> ::std::os::raw::c_int;
    pub fn cef_is_cert_status_minor_error(status: cef_cert_status_t::Type)
        -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn cef_string_wide_set(
        src: *const wchar_t, src_len: usize, output: *mut cef_string_wide_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_set(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_utf8_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_set(
        src: *const char16, src_len: usize, output: *mut cef_string_utf16_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_clear(str: *mut cef_string_wide_t);
}
extern "C" {
    pub fn cef_string_utf8_clear(str: *mut cef_string_utf8_t);
}
extern "C" {
    pub fn cef_string_utf16_clear(str: *mut cef_string_utf16_t);
}
extern "C" {
    pub fn cef_string_wide_cmp(
        str1: *const cef_string_wide_t, str2: *const cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_cmp(
        str1: *const cef_string_utf8_t, str2: *const cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_cmp(
        str1: *const cef_string_utf16_t, str2: *const cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_to_utf8(
        src: *const wchar_t, src_len: usize, output: *mut cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_wide(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_to_utf16(
        src: *const wchar_t, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_wide(
        src: *const char16, src_len: usize, output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_utf16(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_utf8(
        src: *const char16, src_len: usize, output: *mut cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_ascii_to_wide(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_ascii_to_utf16(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn cef_string_userfree_wide_alloc() -> cef_string_userfree_wide_t;
}
extern "C" {
    pub fn cef_string_userfree_utf8_alloc() -> cef_string_userfree_utf8_t;
}
extern "C" {
    pub fn cef_string_userfree_utf16_alloc() -> cef_string_userfree_utf16_t;
}
extern "C" {
    pub fn cef_string_userfree_wide_free(str: cef_string_userfree_wide_t);
}
extern "C" {
    pub fn cef_string_userfree_utf8_free(str: cef_string_userfree_utf8_t);
}
extern "C" {
    pub fn cef_string_userfree_utf16_free(str: cef_string_userfree_utf16_t);
}
extern "C" {
    pub fn cef_string_utf16_to_lower(
        src: *const char16, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_upper(
        src: *const char16, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn cef_string_list_alloc() -> cef_string_list_t;
}
extern "C" {
    pub fn cef_string_list_size(list: cef_string_list_t) -> usize;
}
extern "C" {
    pub fn cef_string_list_value(
        list: cef_string_list_t, index: usize, value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_list_append(list: cef_string_list_t, value: *const cef_string_t);
}
extern "C" {
    pub fn cef_string_list_clear(list: cef_string_list_t);
}
extern "C" {
    pub fn cef_string_list_free(list: cef_string_list_t);
}
extern "C" {
    pub fn cef_string_list_copy(list: cef_string_list_t) -> cef_string_list_t;
}

extern "C" {
    pub fn cef_string_map_alloc() -> cef_string_map_t;
}
extern "C" {
    pub fn cef_string_map_size(map: cef_string_map_t) -> usize;
}
extern "C" {
    pub fn cef_string_map_find(
        map: cef_string_map_t, key: *const cef_string_t, value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_key(
        map: cef_string_map_t, index: usize, key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_value(
        map: cef_string_map_t, index: usize, value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_append(
        map: cef_string_map_t, key: *const cef_string_t, value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_clear(map: cef_string_map_t);
}
extern "C" {
    pub fn cef_string_map_free(map: cef_string_map_t);
}

extern "C" {
    pub fn cef_string_multimap_alloc() -> cef_string_multimap_t;
}
extern "C" {
    pub fn cef_string_multimap_size(map: cef_string_multimap_t) -> usize;
}
extern "C" {
    pub fn cef_string_multimap_find_count(
        map: cef_string_multimap_t, key: *const cef_string_t,
    ) -> usize;
}
extern "C" {
    pub fn cef_string_multimap_enumerate(
        map: cef_string_multimap_t, key: *const cef_string_t, value_index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_key(
        map: cef_string_multimap_t, index: usize, key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_value(
        map: cef_string_multimap_t, index: usize, value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_append(
        map: cef_string_multimap_t, key: *const cef_string_t, value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_clear(map: cef_string_multimap_t);
}
extern "C" {
    pub fn cef_string_multimap_free(map: cef_string_multimap_t);
}

extern "C" {
    pub fn cef_time_to_timet(
        cef_time: *const cef_time_t, time: *mut time_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_timet(time: time_t, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_to_doublet(
        cef_time: *const cef_time_t, time: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_doublet(time: f64, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_now(cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_delta(
        cef_time1: *const cef_time_t, cef_time2: *const cef_time_t,
        delta: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn cef_command_line_create() -> *mut cef_command_line_t;
}
extern "C" {
    pub fn cef_command_line_get_global() -> *mut cef_command_line_t;
}

extern "C" {
    pub fn cef_value_create() -> *mut cef_value_t;
}

extern "C" {
    pub fn cef_binary_value_create(
        data: *const ::std::os::raw::c_void, data_size: usize,
    ) -> *mut cef_binary_value_t;
}

extern "C" {
    pub fn cef_dictionary_value_create() -> *mut cef_dictionary_value_t;
}

extern "C" {
    pub fn cef_list_value_create() -> *mut cef_list_value_t;
}

extern "C" {
    pub fn cef_image_create() -> *mut cef_image_t;
}

extern "C" {
    pub fn cef_stream_reader_create_for_file(
        fileName: *const cef_string_t,
    ) -> *mut cef_stream_reader_t;
}
extern "C" {
    pub fn cef_stream_reader_create_for_data(
        data: *mut ::std::os::raw::c_void, size: usize,
    ) -> *mut cef_stream_reader_t;
}
extern "C" {
    pub fn cef_stream_reader_create_for_handler(
        handler: *mut cef_read_handler_t,
    ) -> *mut cef_stream_reader_t;
}

extern "C" {
    pub fn cef_stream_writer_create_for_file(
        fileName: *const cef_string_t,
    ) -> *mut cef_stream_writer_t;
}
extern "C" {
    pub fn cef_stream_writer_create_for_handler(
        handler: *mut cef_write_handler_t,
    ) -> *mut cef_stream_writer_t;
}

extern "C" {
    pub fn cef_drag_data_create() -> *mut cef_drag_data_t;
}

extern "C" {
    pub fn cef_process_message_create(name: *const cef_string_t) -> *mut cef_process_message_t;
}

extern "C" {
    pub fn cef_request_create() -> *mut cef_request_t;
}

extern "C" {
    pub fn cef_post_data_create() -> *mut cef_post_data_t;
}

extern "C" {
    pub fn cef_post_data_element_create() -> *mut cef_post_data_element_t;
}

extern "C" {
    pub fn cef_cookie_manager_get_global_manager(
        callback: *mut _cef_completion_callback_t,
    ) -> *mut cef_cookie_manager_t;
}

extern "C" {
    pub fn cef_request_context_get_global_context() -> *mut cef_request_context_t;
}
extern "C" {
    pub fn cef_request_context_create_context(
        settings: *const _cef_request_context_settings_t,
        handler: *mut _cef_request_context_handler_t,
    ) -> *mut cef_request_context_t;
}
extern "C" {
    pub fn cef_create_context_shared(
        other: *mut cef_request_context_t, handler: *mut _cef_request_context_handler_t,
    ) -> *mut cef_request_context_t;
}

extern "C" {
    pub fn cef_browser_host_create_browser(
        windowInfo: *const cef_window_info_t, client: *mut _cef_client_t, url: *const cef_string_t,
        settings: *const _cef_browser_settings_t, extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_browser_host_create_browser_sync(
        windowInfo: *const cef_window_info_t, client: *mut _cef_client_t, url: *const cef_string_t,
        settings: *const _cef_browser_settings_t, extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_browser_t;
}

extern "C" {
    pub fn cef_print_settings_create() -> *mut cef_print_settings_t;
}

extern "C" {
    pub fn cef_task_runner_get_for_current_thread() -> *mut cef_task_runner_t;
}
extern "C" {
    pub fn cef_task_runner_get_for_thread(
        threadId: cef_thread_id_t::Type,
    ) -> *mut cef_task_runner_t;
}
extern "C" {
    pub fn cef_currently_on(threadId: cef_thread_id_t::Type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_post_task(
        threadId: cef_thread_id_t::Type, task: *mut cef_task_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_post_delayed_task(
        threadId: cef_thread_id_t::Type, task: *mut cef_task_t, delay_ms: int64,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn cef_v8context_get_current_context() -> *mut cef_v8context_t;
}
extern "C" {
    pub fn cef_v8context_get_entered_context() -> *mut cef_v8context_t;
}
extern "C" {
    pub fn cef_v8context_in_context() -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn cef_v8value_create_undefined() -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_null() -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_bool(value: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_int(value: int32) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_uint(value: uint32) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_double(value: f64) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_date(date: *const cef_time_t) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_string(value: *const cef_string_t) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_object(
        accessor: *mut cef_v8accessor_t, interceptor: *mut cef_v8interceptor_t,
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_array(length: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_array_buffer(
        buffer: *mut ::std::os::raw::c_void, length: usize,
        release_callback: *mut cef_v8array_buffer_release_callback_t,
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_function(
        name: *const cef_string_t, handler: *mut cef_v8handler_t,
    ) -> *mut cef_v8value_t;
}

extern "C" {
    pub fn cef_v8stack_trace_get_current(
        frame_limit: ::std::os::raw::c_int,
    ) -> *mut cef_v8stack_trace_t;
}

extern "C" {
    pub fn cef_register_extension(
        extension_name: *const cef_string_t, javascript_code: *const cef_string_t,
        handler: *mut cef_v8handler_t,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn cef_response_create() -> *mut cef_response_t;
}

extern "C" {
    pub fn cef_register_scheme_handler_factory(
        scheme_name: *const cef_string_t, domain_name: *const cef_string_t,
        factory: *mut cef_scheme_handler_factory_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_clear_scheme_handler_factories() -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn cef_execute_process(
        args: *const _cef_main_args_t, application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_initialize(
        args: *const _cef_main_args_t, settings: *const _cef_settings_t,
        application: *mut cef_app_t, windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
